Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2015.09.07 - 12:13:34]

main.asm
Errors: 0

       1   00:0000                        defpage 0, 0x4000, 0x4000
       2   00:0000  (C000)                map 0xc000
       3   00:0000                      
       4   00:0000  (00)                	page 0
       5   00:4000                      
       6   00:4000                      
       7   00:4000                        ;;
       8   00:4000                        ;; romheader
       9   00:4000                        ;;
      10   00:4000                      romheader:
      11   00:4000  41 42               	db "AB"
      12   00:4002  10 40               	dw start
      13   00:4004  00 (12)             	ds 12
      14   00:4010                      
      15   00:4010                      
      16   00:4010                       	;;
      17   00:4010                        ;; start
      18   00:4010                        ;;
      19   00:4010                      start:
      20   00:4010  CD 28 41              call game.init
      21   00:4013  CD DA 40              call logo.run
      22   00:4016  CD 37 41              call game.run
      23   00:4019  C9                    ret
      24   00:401A                      
      25   00:401A                      
      26   00:401A                        ;; asm files
      27   00:401A                        include bios.asm
       1.  00:401A                        ;; http://map.grauw.nl/resources/msxbios.php
       2.  00:401A                      
       3.  00:401A                        module bios
       4.  00:401A                      
       5.  00:401A                      ;; CHKRAM (also called STARTUP, RESET or BOOT)
       6.  00:401A                      ;; Address  : #0000
       7.  00:401A                      ;; Function : Tests RAM and sets RAM slot for the system
       8.  00:401A                      ;; Registers: All
       9.  00:401A                      ;; Remark   : After this, a jump must be made to INIT, for further initialisation.
      10.  00:401A  (00:0000)           chkram equ 0x0000
      11.  00:401A                      
      12.  00:401A                      ;; SYNCHR
      13.  00:401A                      ;; Address  : #0008
      14.  00:401A                      ;; Function : tests whether the character of [HL] is the specified character
      15.  00:401A                      ;;            if not, it generates SYNTAX ERROR, otherwise it goes to CHRGTR (#0010)
      16.  00:401A                      ;; Input    : set the character to be tested in [HL] and the character to be
      17.  00:401A                      ;;            compared next to RST instruction which calls this routine (inline parameter)
      18.  00:401A                      ;; Output   : HL is increased by one and A receives [HL], When the tested character is
      19.  00:401A                      ;;            numerical, the CY flag is set the end of the statement (00h or 3Ah) causes
      20.  00:401A                      ;;            the Z flag to be set
      21.  00:401A                      ;; Registers: AF, HL
      22.  00:401A  (00:0008)           synchr equ 0x0008
      23.  00:401A                      
      24.  00:401A                      ;; RDSLT
      25.  00:401A                      ;; Address  : #000C
      26.  00:401A                      ;; Function : Reads the value of an address in another slot
      27.  00:401A                      ;; Input    : A  - ExxxSSPP
      28.  00:401A                      ;;            |        || Primary  slotnumber  (00-11)
      29.  00:401A                      ;;            HL - Address to read
      30.  00:401A                      ;; Output   : A  - Contains the vaule of the read address
      31.  00:401A                      ;; Registers: AF, C, DE
      32.  00:401A                      ;; Remark   : This routine turns off the interupt, but won't turn it on again
      33.  00:401A  (00:000C)           rdslt equ 0x000c
      34.  00:401A                      
      35.  00:401A                      ;; CHRGTR
      36.  00:401A                      ;; Address  : #0010
      37.  00:401A                      ;; Function : Gets the next character (or token) of the Basic-text
      38.  00:401A                      ;; Input    : HL - Address last character
      39.  00:401A                      ;; Output   : HL - points to the next character
      40.  00:401A                      ;;            A  - contains the character
      41.  00:401A                      ;;            C  - flag set if it's a number
      42.  00:401A                      ;;            Z  - flag set if it's the end of the statement
      43.  00:401A                      ;; Registers: AF, HL
      44.  00:401A  (00:0010)           chrgtr equ 0x0010
      45.  00:401A                      
      46.  00:401A                      ;; WRSLT
      47.  00:401A                      ;; Address  : #0014
      48.  00:401A                      ;; Function : Writes a value to an address in another slot.
      49.  00:401A                      ;; Input    : A  - Slot in which the value will be written
      50.  00:401A                      ;;            see RDSLT for input
      51.  00:401A                      ;;            HL - Address of value to write
      52.  00:401A                      ;;            E  - value to write
      53.  00:401A                      ;; Registers: AF, BC, D
      54.  00:401A                      ;; Remark   : See RDSLT
      55.  00:401A  (00:0014)           wrslt equ 0x0014
      56.  00:401A                      
      57.  00:401A                      ;; OUTDO
      58.  00:401A                      ;; Address  : #0018
      59.  00:401A                      ;; Function : Output to current outputchannel (printer, diskfile, etc.)
      60.  00:401A                      ;; Input    : A  - PRTFIL, PRTFLG
      61.  00:401A                      ;; Remark   : Used in basic, in ML it's pretty difficult
      62.  00:401A  (00:0018)           outdo equ 0x0018
      63.  00:401A                      
      64.  00:401A                      ;; CALSLT
      65.  00:401A                      ;; Address  : #001C
      66.  00:401A                      ;; Function : Executes inter-slot call.
      67.  00:401A                      ;; Input    : IY - High byte with input for A in RDSLT
      68.  00:401A                      ;;            IX - The address that will be called
      69.  00:401A                      ;; Remark   : Variables can never be given in alternative registers
      70.  00:401A                      ;;            of the Z-80 or IX and IY
      71.  00:401A  (00:001C)           calslt equ 0x001c
      72.  00:401A                      
      73.  00:401A                      ;; DCOMPR
      74.  00:401A                      ;; Address  : #0020
      75.  00:401A                      ;; Function : Compares HL with DE
      76.  00:401A                      ;; Input    : HL, DE
      77.  00:401A                      ;; Output   : Z-flag set if HL and DE are the same.
      78.  00:401A                      ;; Registers: AF
      79.  00:401A  (00:0020)           dcompr equ 0x0020
      80.  00:401A                      
      81.  00:401A                      ;; ENASLT
      82.  00:401A                      ;; Address  : #0024
      83.  00:401A                      ;; Function : Switches indicated slot at indicated page on perpetual
      84.  00:401A                      ;; Input    : A  - ExxxSSPP
      85.  00:401A                      ;;                 +-?------ see RDSLT
      86.  00:401A                      ;;            H - Bit 6 and 7 must contain the page number (00-11)
      87.  00:401A  (00:0024)           enaslt equ 0x0024
      88.  00:401A                      
      89.  00:401A                      ;; GETYPR
      90.  00:401A                      ;; Address  : #0028
      91.  00:401A                      ;; Function : Returns Type of DAC
      92.  00:401A                      ;; Input    : DAC
      93.  00:401A                      ;; Output   : S,Z,P/V, CY
      94.  00:401A                      ;; Registers: AF
      95.  00:401A                      ;; Remark   : Not a very clear routine to me, please mail us if you know more about it.
      96.  00:401A  (00:0028)           getypr equ 0x0028
      97.  00:401A                      
      98.  00:401A                      ;; CALLF
      99.  00:401A                      ;; Address  : #0030
     100.  00:401A                      ;; Function : Executes an interslot call
     101.  00:401A                      ;; Output   : depends on the calling routine
     102.  00:401A                      ;; Registers: AF, and the other registers depending on the calling routine
     103.  00:401A                      ;; Remark   : The following is the calling sequence:
     104.  00:401A                      ;;            RST #30
     105.  00:401A                      ;;            DB destination slot (see RDSLT accu)
     106.  00:401A                      ;;            DW destination address
     107.  00:401A  (00:0030)           callf equ 0x0030
     108.  00:401A                      
     109.  00:401A                      ;; KEYINT
     110.  00:401A                      ;; Address  : #0038
     111.  00:401A                      ;; Function : Executes the timer interrupt process routine
     112.  00:401A  (00:0038)           keyint equ 0x0038
     113.  00:401A                      
     114.  00:401A                      ;;
     115.  00:401A                      ;; Initialization-routines
     116.  00:401A                      ;;
     117.  00:401A                      
     118.  00:401A                      ;; INITIO
     119.  00:401A                      ;; Address  : #003B
     120.  00:401A                      ;; Function : Initialises the device
     121.  00:401A                      ;; Registers: All
     122.  00:401A  (00:003B)           initio equ 0x003b
     123.  00:401A                      
     124.  00:401A                      ;; INIFNK
     125.  00:401A                      ;; Address  : #003E
     126.  00:401A                      ;; Function : Initialises the contents of the function keys
     127.  00:401A                      ;; Registers: All
     128.  00:401A  (00:003E)           inifnk equ 0x003e
     129.  00:401A                      
     130.  00:401A                      ;;
     131.  00:401A                      ;; VDP routines
     132.  00:401A                      ;;
     133.  00:401A                      
     134.  00:401A                      ;; DISSCR
     135.  00:401A                      ;; Address  : #0041
     136.  00:401A                      ;; Function : inhibits the screen display
     137.  00:401A                      ;; Registers: AF, BC
     138.  00:401A  (00:0041)           disscr equ 0x0041
     139.  00:401A                      
     140.  00:401A                      ;; ENASCR
     141.  00:401A                      ;; Address  : #0044
     142.  00:401A                      ;; Function : displays the screen
     143.  00:401A                      ;; Registers: AF, BC
     144.  00:401A  (00:0044)           enascr equ 0x0044
     145.  00:401A                      
     146.  00:401A                      ;; WRTVDP
     147.  00:401A                      ;; Address  : #0047
     148.  00:401A                      ;; Function : write data in the VDP-register
     149.  00:401A                      ;; Input    : B  - data to write
     150.  00:401A                      ;;            C  - number of the register
     151.  00:401A                      ;; Registers: AF, BC
     152.  00:401A  (00:0047)           wrtvdp equ 0x0047
     153.  00:401A                      
     154.  00:401A                      ;; RDVRM
     155.  00:401A                      ;; Address  : #004A
     156.  00:401A                      ;; Function : Reads the content of VRAM
     157.  00:401A                      ;; Input    : HL - address read
     158.  00:401A                      ;; Output   : A  - value which was read
     159.  00:401A                      ;; Registers: AF
     160.  00:401A  (00:004A)           rdvrm equ 0x004a
     161.  00:401A                      
     162.  00:401A                      ;; WRTVRM
     163.  00:401A                      ;; Address  : #004D
     164.  00:401A                      ;; Function : Writes data in VRAM
     165.  00:401A                      ;; Input    : HL - address write
     166.  00:401A                      ;;            A  - value write
     167.  00:401A                      ;; Registers: AF
     168.  00:401A  (00:004D)           wrtvrm equ 0x004d
     169.  00:401A                      
     170.  00:401A                      ;; SETRD
     171.  00:401A                      ;; Address  : #0050
     172.  00:401A                      ;; Function : Enable VDP to read
     173.  00:401A                      ;; Input    : HL - for VRAM-address
     174.  00:401A                      ;; Registers: AF
     175.  00:401A  (00:0050)           setrd equ 0x0050
     176.  00:401A                      
     177.  00:401A                      ;; SETWRT
     178.  00:401A                      ;; Address  : #0053
     179.  00:401A                      ;; Function : Enable VDP to write
     180.  00:401A                      ;; Input    : HL - Address
     181.  00:401A                      ;; Registers: AF
     182.  00:401A  (00:0053)           setwrt equ 0x0053
     183.  00:401A                      
     184.  00:401A                      ;; FILVRM
     185.  00:401A                      ;; Address  : #0056
     186.  00:401A                      ;; Function : fill VRAM with value
     187.  00:401A                      ;; Input    : A  - data byte
     188.  00:401A                      ;;            BC - length of the area to be written
     189.  00:401A                      ;;            HL - start address
     190.  00:401A                      ;; Registers: AF, BC
     191.  00:401A  (00:0056)           filvrm equ 0x0056
     192.  00:401A                      
     193.  00:401A                      ;; LDIRMV
     194.  00:401A                      ;; Address  : #0059
     195.  00:401A                      ;; Function : Block transfer to memory from VRAM
     196.  00:401A                      ;; Input    : BC - blocklength
     197.  00:401A                      ;;            DE - Start address of memory
     198.  00:401A                      ;;            HL - Start address of VRAM
     199.  00:401A                      ;; Registers: All
     200.  00:401A  (00:0059)           ldirmv equ 0x0059
     201.  00:401A                      
     202.  00:401A                      ;; LDIRVM
     203.  00:401A                      ;; Address  : #005C
     204.  00:401A                      ;; Function : Block transfer to VRAM from memory
     205.  00:401A                      ;; Input    : BC - blocklength
     206.  00:401A                      ;;            DE - Start address of VRAM
     207.  00:401A                      ;;            HL - Start address of memory
     208.  00:401A                      ;; Registers: All
     209.  00:401A  (00:005C)           ldirvm equ 0x005c
     210.  00:401A                      
     211.  00:401A                      ;; CHGMOD
     212.  00:401A                      ;; Address  : #005F
     213.  00:401A                      ;; Function : Switches to given screenmode
     214.  00:401A                      ;; Input    : A  - screen mode
     215.  00:401A                      ;; Registers: All
     216.  00:401A  (00:005F)           chgmod equ 0x005f
     217.  00:401A                      
     218.  00:401A                      ;; CHGCLR
     219.  00:401A                      ;; Address  : #0062
     220.  00:401A                      ;; Function : Changes the screencolors
     221.  00:401A                      ;; Input    : Foregroundcolor in FORCLR
     222.  00:401A                      ;;            Backgroundcolor in BAKCLR
     223.  00:401A                      ;;            Bordercolor in BDRCLR
     224.  00:401A                      ;; Registers: All
     225.  00:401A  (00:0062)           chgclr equ 0x0062
     226.  00:401A                      
     227.  00:401A                      ;; NMI
     228.  00:401A                      ;; Address  : #0066
     229.  00:401A                      ;; Function : Executes (non-maskable interupt) handling routine
     230.  00:401A  (00:0066)           nmi equ 0x0066
     231.  00:401A                      
     232.  00:401A                      ;; CLRSPR
     233.  00:401A                      ;; Address  : #0069
     234.  00:401A                      ;; Function : Initialises all sprites
     235.  00:401A                      ;; Input    : SCRMOD
     236.  00:401A                      ;; Registers: Alles
     237.  00:401A  (00:0069)           clrspr equ 0x0069
     238.  00:401A                      
     239.  00:401A                      ;; INITXT
     240.  00:401A                      ;; Address  : #006C
     241.  00:401A                      ;; Function : Schakelt naar SCREEN 0 (tekst-scherm met 40*24 tekens)
     242.  00:401A                      ;; Input    : TXTNAM, TXTCGP
     243.  00:401A                      ;; Registers: All
     244.  00:401A  (00:006C)           initxt equ 0x006c
     245.  00:401A                      
     246.  00:401A                      ;; INIT32
     247.  00:401A                      ;; Address  : #006F
     248.  00:401A                      ;; Function : Switches to SCREEN 1 (text screen with 32*24 characters)
     249.  00:401A                      ;; Input    : T32NAM, T32CGP, T32COL, T32ATR, T32PAT
     250.  00:401A                      ;; Registers: All
     251.  00:401A  (00:006F)           init32 equ 0x006f
     252.  00:401A                      
     253.  00:401A                      ;; INIGRP
     254.  00:401A                      ;; Address  : #0072
     255.  00:401A                      ;; Function : Switches to SCREEN 2 (high resolution screen with 256*192 pixels)
     256.  00:401A                      ;; Input    : GRPNAM, GRPCGP, GRPCOL, GRPATR, GRPPAT
     257.  00:401A                      ;; Registers: All
     258.  00:401A  (00:0072)           inigrp equ 0x0072
     259.  00:401A                      
     260.  00:401A                      ;; INIMLT
     261.  00:401A                      ;; Address  : #0075
     262.  00:401A                      ;; Function : Switches to SCREEN 3 (multi-color screen 64*48 pixels)
     263.  00:401A                      ;; Input    : MLTNAM, MLTCGP, MLTCOL, MLTATR, MLTPAT
     264.  00:401A                      ;; Registers: All
     265.  00:401A  (00:0075)           inimlt equ 0x0075
     266.  00:401A                      
     267.  00:401A                      ;; SETTXT
     268.  00:401A                      ;; Address  : #0078
     269.  00:401A                      ;; Function : Switches to VDP in SCREEN 0 mode
     270.  00:401A                      ;; Input    : See INITXT
     271.  00:401A                      ;; Registers: All
     272.  00:401A  (00:0078)           settxt equ 0x0078
     273.  00:401A                      
     274.  00:401A                      ;; SETT32
     275.  00:401A                      ;; Address  : #007B
     276.  00:401A                      ;; Function : Schakelt VDP in SCREEN 1 modus
     277.  00:401A                      ;; Input    : See INIT32
     278.  00:401A                      ;; Registers: All
     279.  00:401A  (00:007B)           sett32 equ 0x007b
     280.  00:401A                      
     281.  00:401A                      ;; SETGRP
     282.  00:401A                      ;; Address  : #007E
     283.  00:401A                      ;; Function : Switches VDP to SCREEN 2 mode
     284.  00:401A                      ;; Input    : See INIGRP
     285.  00:401A                      ;; Registers: All
     286.  00:401A  (00:007E)           setgrp equ 0x007e
     287.  00:401A                      
     288.  00:401A                      ;; SETMLT
     289.  00:401A                      ;; Address  : #0081
     290.  00:401A                      ;; Function : Switches VDP to SCREEN 3 mode
     291.  00:401A                      ;; Input    : See INIMLT
     292.  00:401A                      ;; Registers: All
     293.  00:401A  (00:0081)           setmlt equ 0x0081
     294.  00:401A                      
     295.  00:401A                      ;; CALPAT
     296.  00:401A                      ;; Address  : #0084
     297.  00:401A                      ;; Function : Returns the address of the sprite pattern table
     298.  00:401A                      ;; Input    : A  - Sprite ID
     299.  00:401A                      ;; Output   : HL - For the address
     300.  00:401A                      ;; Registers: AF, DE, HL
     301.  00:401A  (00:0084)           calpat equ 0x0084
     302.  00:401A                      
     303.  00:401A                      ;; CALATR
     304.  00:401A                      ;; Address  : #0087
     305.  00:401A                      ;; Function : Returns the address of the sprite attribute table
     306.  00:401A                      ;; Input    : A  - Sprite number
     307.  00:401A                      ;; Output   : HL - For the address
     308.  00:401A                      ;; Registers: AF, DE, HL
     309.  00:401A  (00:0087)           calatr equ 0x0087
     310.  00:401A                      
     311.  00:401A                      ;; GSPSIZ
     312.  00:401A                      ;; Address  : #008A
     313.  00:401A                      ;; Function : Returns current sprite size
     314.  00:401A                      ;; Output   : A  - Sprite-size in bytes
     315.  00:401A                      ;;            C-flag set when size is 16*16 sprites otherwise C-flag is reset
     316.  00:401A                      ;; Registers: AF
     317.  00:401A  (00:008A)           gspsiz equ 0x008a
     318.  00:401A                      
     319.  00:401A                      ;; GRPPRT
     320.  00:401A                      ;; Address  : #008D
     321.  00:401A                      ;; Function : Displays a character on the graphic screen
     322.  00:401A                      ;; Input    : A  - ASCII value of the character to print
     323.  00:401A  (00:008D)           grpprt equ 0x008d
     324.  00:401A                      
     325.  00:401A                      ;;
     326.  00:401A                      ;; PSG routines
     327.  00:401A                      ;;
     328.  00:401A                      
     329.  00:401A                      ;; GICINI
     330.  00:401A                      ;; Address  : #0090
     331.  00:401A                      ;; Function : Initialises PSG and sets initial value for the PLAY statement
     332.  00:401A                      ;; Registers: All
     333.  00:401A  (00:0090)           gecini equ 0x0090
     334.  00:401A                      
     335.  00:401A                      ;; WRTPSG
     336.  00:401A                      ;; Address  : #0093
     337.  00:401A                      ;; Function : Writes data to PSG-register
     338.  00:401A                      ;; Input    : A  - PSG register number
     339.  00:401A                      ;;            E  - data write
     340.  00:401A  (00:0093)           wrtpsg equ 0x0093
     341.  00:401A                      
     342.  00:401A                      ;; RDPSG
     343.  00:401A                      ;; Address  : #0096
     344.  00:401A                      ;; Function : Reads value from PSG-register
     345.  00:401A                      ;; Input    : A  - PSG-register read
     346.  00:401A                      ;; Output   : A  - value read
     347.  00:401A  (00:0096)           rdpsg equ 0x0096
     348.  00:401A                      
     349.  00:401A                      ;; STRTMS
     350.  00:401A                      ;; Address  : #0099
     351.  00:401A                      ;; Function : Tests whether the PLAY statement is being executed as a background
     352.  00:401A                      ;;            task. If not, begins to execute the PLAY statement
     353.  00:401A                      ;; Registers: All
     354.  00:401A  (00:0099)           strtms equ 0x0099
     355.  00:401A                      
     356.  00:401A                      ;;
     357.  00:401A                      ;; Console routines
     358.  00:401A                      ;;
     359.  00:401A                      
     360.  00:401A                      ;; CHSNS
     361.  00:401A                      ;; Address  : #009C
     362.  00:401A                      ;; Function : Tests the status of the keyboard buffer
     363.  00:401A                      ;; Output   : Z-flag set if buffer is empty, otherwise not set
     364.  00:401A                      ;; Registers: AF
     365.  00:401A  (00:009C)           chsns equ 0x009c
     366.  00:401A                      
     367.  00:401A                      ;; CHGET
     368.  00:401A                      ;; Address  : #009F
     369.  00:401A                      ;; Function : One character input (waiting)
     370.  00:401A                      ;; Output   : A  - ASCII-code of the input character
     371.  00:401A                      ;; Registers: AF
     372.  00:401A  (00:009F)           chget equ 0x009f
     373.  00:401A                      
     374.  00:401A                      ;; CHPUT
     375.  00:401A                      ;; Address  : #00A2
     376.  00:401A                      ;; Function : Displays one character
     377.  00:401A                      ;; Input    : A  - ASCII-code of character to display
     378.  00:401A  (00:00A2)           chput equ 0x00a2
     379.  00:401A                      
     380.  00:401A                      ;; LPTOUT
     381.  00:401A                      ;; Address  : #00A5
     382.  00:401A                      ;; Function : Sends one character to printer
     383.  00:401A                      ;; Input    : A  - ASCII-code of character to send
     384.  00:401A                      ;; Output   : C-flag set if failed
     385.  00:401A                      ;; Registers: F
     386.  00:401A  (00:00A5)           lptout equ 0x00a5
     387.  00:401A                      
     388.  00:401A                      ;; LPTSTT
     389.  00:401A                      ;; Address  : #00A8
     390.  00:401A                      ;; Function : Tests printer status
     391.  00:401A                      ;; Output   : A  - #FF and Z-flag reset if printer is ready
     392.  00:401A                      ;;                 #00 and Z-flag set if not ready
     393.  00:401A                      ;; Registers: AF
     394.  00:401A  (00:00A8)           lptstt equ 0x00a8
     395.  00:401A                      
     396.  00:401A                      ;; CNVCHR
     397.  00:401A                      ;; Address  : #00AB
     398.  00:401A                      ;; Function : tests for the graphic header and transforms the code
     399.  00:401A                      ;; Input    : A  - charactercode
     400.  00:401A                      ;; Output   : the C-flag is reset to not the graphic reader
     401.  00:401A                      ;;            the C-flag and Z-flag are set to the transformed code is set in A
     402.  00:401A                      ;;            the C-flag is set and Z-flag is reset to the untransformed code is set in A
     403.  00:401A                      ;; Registers: AF
     404.  00:401A  (00:00AB)           cnvchr equ 0x00ab
     405.  00:401A                      
     406.  00:401A                      ;; PINLIN
     407.  00:401A                      ;; Address  : #00AE
     408.  00:401A                      ;; Function : Stores in the specified buffer the character codes input until the return
     409.  00:401A                      ;;            key or STOP key is pressed
     410.  00:401A                      ;; Output   : HL - for the starting address of the buffer -1
     411.  00:401A                      ;;            C-flag set when it ends with the STOP key
     412.  00:401A                      ;; Registers: All
     413.  00:401A  (00:00AE)           pinlin equ 0x00ae
     414.  00:401A                      
     415.  00:401A                      ;; INLIN
     416.  00:401A                      ;; Address  : #00B1
     417.  00:401A                      ;; Function : Same as PINLIN except that AUGFLG (#F6AA) is set
     418.  00:401A                      ;; Output   : HL - for the starting address of the buffer -1
     419.  00:401A                      ;;            C-flag set when it ends with the STOP key
     420.  00:401A                      ;; Registers: All
     421.  00:401A  (00:00B1)           inlin equ 0x00b1
     422.  00:401A                      
     423.  00:401A                      ;; QINLIN
     424.  00:401A                      ;; Address  : #00B4
     425.  00:401A                      ;; Function : Prints a questionmark andone space
     426.  00:401A                      ;; Output   : HL - for the starting address of the buffer -1
     427.  00:401A                      ;;            C-flag set when it ends with the STOP key
     428.  00:401A                      ;; Registers: All
     429.  00:401A  (00:00B4)           qinlin equ 0x00b4
     430.  00:401A                      
     431.  00:401A                      ;; BREAKX
     432.  00:401A                      ;; Address  : #00B7
     433.  00:401A                      ;; Function : Tests status of CTRL-STOP
     434.  00:401A                      ;; Output   : C-flag set when pressed
     435.  00:401A                      ;; Registers: AF
     436.  00:401A                      ;; Remark   : In this routine, interrupts are inhibited
     437.  00:401A  (00:00B7)           breakx equ 0x00b7
     438.  00:401A                      
     439.  00:401A                      ;; ISCNTC
     440.  00:401A                      ;; Address  : #00BA
     441.  00:401A                      ;; Function : Tests status of SHIFT-STOP
     442.  00:401A  (00:00BA)           iscntc equ 0x00ba
     443.  00:401A                      
     444.  00:401A                      ;; CKCNTC
     445.  00:401A                      ;; Address  : #00BD
     446.  00:401A                      ;; Function : Same as ISCNTC. used in Basic
     447.  00:401A  (00:00BD)           ckcntc equ 0x00bd
     448.  00:401A                      
     449.  00:401A                      ;; BEEP
     450.  00:401A                      ;; Address  : #00C0
     451.  00:401A                      ;; Function : generates beep
     452.  00:401A                      ;; Registers: All
     453.  00:401A  (00:00C0)           beep equ 0x00c0
     454.  00:401A                      
     455.  00:401A                      ;; CLS
     456.  00:401A                      ;; Address  : #00C3
     457.  00:401A                      ;; Function : Clears the screen
     458.  00:401A                      ;; Registers: AF, BC, DE
     459.  00:401A                      ;; Remark   : Z-flag must be set to be able to run this routine
     460.  00:401A                      ;;            XOR A will do fine most of the time
     461.  00:401A  (00:00C3)           cls equ 0x00c3
     462.  00:401A                      
     463.  00:401A                      ;; POSIT
     464.  00:401A                      ;; Address  : #00C6
     465.  00:401A                      ;; Function : Plaatst cursor op aangegeven positie
     466.  00:401A                      ;; Input    : H  - Y coordinate of cursor
     467.  00:401A                      ;;            L  - X coordinate of cursor
     468.  00:401A                      ;; Registers: AF
     469.  00:401A  (00:00C6)           posit equ 0x00c6
     470.  00:401A                      
     471.  00:401A                      ;; FNKSB
     472.  00:401A                      ;; Address  : #00C9
     473.  00:401A                      ;; Function : Tests whether the function key display is active (FNKFLG)
     474.  00:401A                      ;;            If so, displays them, otherwise erase them
     475.  00:401A                      ;; Input    : FNKFLG (#FBCE)
     476.  00:401A                      ;; Registers: All
     477.  00:401A  (00:00C9)           fnksb equ 0x00c9
     478.  00:401A                      
     479.  00:401A                      ;; ERAFNK
     480.  00:401A                      ;; Address  : #00CC
     481.  00:401A                      ;; Function : Erase functionkey display
     482.  00:401A                      ;; Registers: All
     483.  00:401A  (00:00CC)           erafnk equ 0x00cc
     484.  00:401A                      
     485.  00:401A                      ;; DSPFNK
     486.  00:401A                      ;; Address  : #00CF
     487.  00:401A                      ;; Function : Displays the function keys
     488.  00:401A                      ;; Registers: All
     489.  00:401A  (00:00CF)           dspfnk equ 0x00cf
     490.  00:401A                      
     491.  00:401A                      ;; TOTEXT
     492.  00:401A                      ;; Address  : #00D2
     493.  00:401A                      ;; Function : Forces the screen to be in the text mode
     494.  00:401A                      ;; Registers: All
     495.  00:401A  (00:00D2)           totext equ 0x00d2
     496.  00:401A                      
     497.  00:401A                      ;;
     498.  00:401A                      ;; Controller routines
     499.  00:401A                      ;;
     500.  00:401A                      
     501.  00:401A                      ;; GTSTCK
     502.  00:401A                      ;; Address  : #00D5
     503.  00:401A                      ;; Function : Returns the joystick status
     504.  00:401A                      ;; Input    : A  - Joystick number to test (0 = cursors, 1 = port 1, 2 = port 2)
     505.  00:401A                      ;; Output   : A  - Direction
     506.  00:401A                      ;; Registers: All
     507.  00:401A  (00:00D5)           gtstck equ 0x00d5
     508.  00:401A                      
     509.  00:401A                      ;; GTTRIG
     510.  00:401A                      ;; Address  : #00D8
     511.  00:401A                      ;; Function : Returns current trigger status
     512.  00:401A                      ;; Input    : A  - trigger button to test
     513.  00:401A                      ;;            0 = spacebar
     514.  00:401A                      ;;            1 = port 1, button A
     515.  00:401A                      ;;            2 = port 2, button A
     516.  00:401A                      ;;            3 = port 1, button B
     517.  00:401A                      ;;            4 = port 2, button B
     518.  00:401A                      ;; Output   : A  - #00 trigger button not pressed
     519.  00:401A                      ;;                 #FF trigger button pressed
     520.  00:401A                      ;; Registers: AF
     521.  00:401A  (00:00D8)           gttrig equ 0x00d8
     522.  00:401A                      
     523.  00:401A                      ;; GTPAD
     524.  00:401A                      ;; Address  : #00DB
     525.  00:401A                      ;; Function : Returns current touch pad status
     526.  00:401A                      ;; Input    : A  - Touchpad number to test
     527.  00:401A                      ;; Output   : A  - Value
     528.  00:401A                      ;; Registers: All
     529.  00:401A  (00:00DB)           gtpad equ 0x00db
     530.  00:401A                      
     531.  00:401A                      ;; GTPDL
     532.  00:401A                      ;; Address  : #00DE
     533.  00:401A                      ;; Function : Returns currenct value of paddle
     534.  00:401A                      ;; Input    : A  - Paddle number
     535.  00:401A                      ;; Output   : A  - Value
     536.  00:401A                      ;; Registers: All
     537.  00:401A  (00:00DE)           gtpdl equ 0x00de
     538.  00:401A                      
     539.  00:401A                      ;;
     540.  00:401A                      ;; Tape device routines
     541.  00:401A                      ;;
     542.  00:401A                      
     543.  00:401A                      ;; TAPION
     544.  00:401A                      ;; Address  : #00E1
     545.  00:401A                      ;; Function : Reads the header block after turning the cassette motor on
     546.  00:401A                      ;; Output   : C-flag set if failed
     547.  00:401A                      ;; Registers: All
     548.  00:401A  (00:00E1)           tapion equ 0x00e1
     549.  00:401A                      
     550.  00:401A                      ;; TAPIN
     551.  00:401A                      ;; Address  : #00E4
     552.  00:401A                      ;; Function : Read data from the tape
     553.  00:401A                      ;; Output   : A  - read value
     554.  00:401A                      ;;            C-flag set if failed
     555.  00:401A                      ;; Registers: All
     556.  00:401A  (00:00E4)           tapin equ 0x00e4
     557.  00:401A                      
     558.  00:401A                      ;; TAPIOF
     559.  00:401A                      ;; Address  : #00E7
     560.  00:401A                      ;; Function : Stops reading from the tape
     561.  00:401A  (00:00E7)           tapiof equ 0x00e7
     562.  00:401A                      
     563.  00:401A                      ;; TAPOON
     564.  00:401A                      ;; Address  : #00EA
     565.  00:401A                      ;; Function : Turns on the cassette motor and writes the header
     566.  00:401A                      ;; Input    : A  - #00 short header
     567.  00:401A                      ;;             not #00 long header
     568.  00:401A                      ;; Output   : C-flag set if failed
     569.  00:401A                      ;; Registers: All
     570.  00:401A  (00:00EA)           tapoon equ 0x00ea
     571.  00:401A                      
     572.  00:401A                      ;; TAPOUT
     573.  00:401A                      ;; Address  : #00ED
     574.  00:401A                      ;; Function : Writes data on the tape
     575.  00:401A                      ;; Input    : A  - data to write
     576.  00:401A                      ;; Output   : C-flag set if failed
     577.  00:401A                      ;; Registers: All
     578.  00:401A  (00:00ED)           tapout equ 0x00ed
     579.  00:401A                      
     580.  00:401A                      ;; TAPOOF
     581.  00:401A                      ;; Address  : #00F0
     582.  00:401A                      ;; Function : Stops writing on the tape
     583.  00:401A  (00:00F0)           tapoof equ 0x00f0
     584.  00:401A                      
     585.  00:401A                      ;; STMOTR
     586.  00:401A                      ;; Address  : #00F3
     587.  00:401A                      ;; Function : Sets the cassette motor action
     588.  00:401A                      ;; Input    : A  - #00 stop motor
     589.  00:401A                      ;;                 #01 start motor
     590.  00:401A                      ;;                 #FF reverse the current action
     591.  00:401A                      ;; Registers: AF
     592.  00:401A  (00:00F3)           stmotr equ 0x00f3
     593.  00:401A                      
     594.  00:401A                      ;;
     595.  00:401A                      ;; Queue routines
     596.  00:401A                      ;;
     597.  00:401A                      
     598.  00:401A                      ;; LFTQ
     599.  00:401A                      ;; Address  : #00F6
     600.  00:401A                      ;; Function : Gives number of bytes in queue
     601.  00:401A                      ;; Output   : A  - length of queue in bytes
     602.  00:401A                      ;; Remark   : Internal use
     603.  00:401A  (00:00F6)           lftq equ 0x00f6
     604.  00:401A                      
     605.  00:401A                      ;; PUTQ
     606.  00:401A                      ;; Address  : #00F9
     607.  00:401A                      ;; Function : Put byte in queue
     608.  00:401A                      ;; Remark   : Internal use
     609.  00:401A  (00:00F9)           putq equ 0x00f9
     610.  00:401A                      
     611.  00:401A                      ;;
     612.  00:401A                      ;; Graphic routines
     613.  00:401A                      ;;
     614.  00:401A                      
     615.  00:401A                      ;; RIGHTC
     616.  00:401A                      ;; Address  : #00FC
     617.  00:401A                      ;; Function : Shifts screenpixel to the right
     618.  00:401A                      ;; Registers: AF
     619.  00:401A  (00:00FC)           rightc equ 0x00fc
     620.  00:401A                      
     621.  00:401A                      ;; LEFTC
     622.  00:401A                      ;; Address  : #00FF
     623.  00:401A                      ;; Function : Shifts screenpixel to the left
     624.  00:401A                      ;; Registers: AF
     625.  00:401A  (00:00FF)           leftc equ 0x00ff
     626.  00:401A                      
     627.  00:401A                      ;; UPC
     628.  00:401A                      ;; Address  : #0102
     629.  00:401A                      ;; Function : Shifts screenpixel up
     630.  00:401A                      ;; Registers: AF
     631.  00:401A  (00:0102)           upc equ 0x0102
     632.  00:401A                      
     633.  00:401A                      ;; TUPC
     634.  00:401A                      ;; Address  : #0105
     635.  00:401A                      ;; Function : Tests whether UPC is possible, if possible, execute UPC
     636.  00:401A                      ;; Output   : C-flag set if operation would end outside the screen
     637.  00:401A                      ;; Registers: AF
     638.  00:401A  (00:0105)           tupc equ 0x0105
     639.  00:401A                      
     640.  00:401A                      ;; DOWNC
     641.  00:401A                      ;; Address  : #0108
     642.  00:401A                      ;; Function : Shifts screenpixel down
     643.  00:401A                      ;; Registers: AF
     644.  00:401A  (00:0108)           downc equ 0x0108
     645.  00:401A                      
     646.  00:401A                      ;; TDOWNC
     647.  00:401A                      ;; Address  : #010B
     648.  00:401A                      ;; Function : Tests whether DOWNC is possible, if possible, execute DOWNC
     649.  00:401A                      ;; Output   : C-flag set if operation would end outside the screen
     650.  00:401A                      ;; Registers: AF
     651.  00:401A  (00:010B)           tdownc equ 0x010b
     652.  00:401A                      
     653.  00:401A                      ;; SCALXY
     654.  00:401A                      ;; Address  : #010E
     655.  00:401A                      ;; Function : Scales X and Y coordinates
     656.  00:401A  (00:010E)           scalxy equ 0x010e
     657.  00:401A                      
     658.  00:401A                      ;; MAPXY
     659.  00:401A                      ;; Address  : #0111
     660.  00:401A                      ;; Function : Places cursor at current cursor address
     661.  00:401A  (00:0111)           mapxy equ 0x0111
     662.  00:401A                      
     663.  00:401A                      ;; FETCHC
     664.  00:401A                      ;; Address  : #0114
     665.  00:401A                      ;; Function : Gets current cursor addresses mask pattern
     666.  00:401A                      ;; Output   : HL - Cursor address
     667.  00:401A                      ;;            A  - Mask pattern
     668.  00:401A  (00:0114)           fetchc equ 0x0114
     669.  00:401A                      
     670.  00:401A                      ;; STOREC
     671.  00:401A                      ;; Address  : #0117
     672.  00:401A                      ;; Function : Record current cursor addresses mask pattern
     673.  00:401A                      ;; Input    : HL - Cursor address
     674.  00:401A                      ;;            A  - Mask pattern
     675.  00:401A  (00:0117)           storec equ 0x0117
     676.  00:401A                      
     677.  00:401A                      ;; SETATR
     678.  00:401A                      ;; Address  : #011A
     679.  00:401A                      ;; Function : Set attribute byte
     680.  00:401A  (00:011A)           setatr equ 0x011a
     681.  00:401A                      
     682.  00:401A                      ;; READC
     683.  00:401A                      ;; Address  : #011D
     684.  00:401A                      ;; Function : Reads attribute byte of current screenpixel
     685.  00:401A  (00:011D)           readc equ 0x011d
     686.  00:401A                      
     687.  00:401A                      ;; SETC
     688.  00:401A                      ;; Address  : #0120
     689.  00:401A                      ;; Function : Returns currenct screenpixel of specificed attribute byte
     690.  00:401A  (00:0120)           setc equ 0x0120
     691.  00:401A                      
     692.  00:401A                      ;; NSETCX
     693.  00:401A                      ;; Address  : #0123
     694.  00:401A                      ;; Function : Set horizontal screenpixels
     695.  00:401A  (00:0123)           nsetcx equ 0x0123
     696.  00:401A                      
     697.  00:401A                      ;; GTASPC
     698.  00:401A                      ;; Address  : #0126
     699.  00:401A                      ;; Function : Gets screen relations
     700.  00:401A                      ;; Output   : DE, HL
     701.  00:401A                      ;; Registers: DE, HL
     702.  00:401A  (00:0126)           gtaspc equ 0x0126
     703.  00:401A                      
     704.  00:401A                      ;; PNTINI
     705.  00:401A                      ;; Address  : #0129
     706.  00:401A                      ;; Function : Initalises the PAINT instruction
     707.  00:401A  (00:0129)           pntini equ 0x0129
     708.  00:401A                      
     709.  00:401A                      ;; SCANR
     710.  00:401A                      ;; Address  : #012C
     711.  00:401A                      ;; Function : Scans screenpixels to the right
     712.  00:401A  (00:012C)           scanr equ 0x012c
     713.  00:401A                      
     714.  00:401A                      ;; SCANL
     715.  00:401A                      ;; Address  : #012F
     716.  00:401A                      ;; Function : Scans screenpixels to the left
     717.  00:401A  (00:012F)           scanl equ 0x012f
     718.  00:401A                      
     719.  00:401A                      ;;
     720.  00:401A                      ;; Misc routines
     721.  00:401A                      ;;
     722.  00:401A                      
     723.  00:401A                      ;; CHGCAP
     724.  00:401A                      ;; Address  : #0132
     725.  00:401A                      ;; Function : Alternates the CAP lamp status
     726.  00:401A                      ;; Input    : A  - #00 is lamp on
     727.  00:401A                      ;;             not #00 is lamp off
     728.  00:401A                      ;; Registers: AF
     729.  00:401A  (00:0132)           chgcap equ 0x0132
     730.  00:401A                      
     731.  00:401A                      ;; CHGSND
     732.  00:401A                      ;; Address  : #0135
     733.  00:401A                      ;; Function : Alternates the 1-bit sound port status
     734.  00:401A                      ;; Input    : A  - #00 to turn off
     735.  00:401A                      ;;             not #00 to turn on
     736.  00:401A                      ;; Registers: AF
     737.  00:401A  (00:0135)           chgsnd equ 0x0135
     738.  00:401A                      
     739.  00:401A                      ;; RSLREG
     740.  00:401A                      ;; Address  : #0138
     741.  00:401A                      ;; Function : Reads the primary slot register
     742.  00:401A                      ;; Output   : A  - for the value which was read
     743.  00:401A                      ;;            33221100
     744.  00:401A                      ;;            ||||||- Pagina 0 (#0000-#3FFF)
     745.  00:401A                      ;;            ||||--- Pagina 1 (#4000-#7FFF)
     746.  00:401A                      ;;            ||----- Pagina 2 (#8000-#BFFF)
     747.  00:401A                      ;;            ------- Pagina 3 (#C000-#FFFF)
     748.  00:401A                      ;; Registers: A
     749.  00:401A  (00:0138)           rslreg equ 0x0138
     750.  00:401A                      
     751.  00:401A                      ;; WSLREG
     752.  00:401A                      ;; Address  : #013B
     753.  00:401A                      ;; Function : Writes value to the primary slot register
     754.  00:401A                      ;; Input    : A  - value value to (see RSLREG)
     755.  00:401A  (00:013B)           wslreg equ 0x013b
     756.  00:401A                      
     757.  00:401A                      ;; RDVDP
     758.  00:401A                      ;; Address  : #013E
     759.  00:401A                      ;; Function : Reads VDP status register
     760.  00:401A                      ;; Output   : A  - Value which was read
     761.  00:401A                      ;; Registers: A
     762.  00:401A  (00:013E)           rdvdp equ 0x013e
     763.  00:401A                      
     764.  00:401A                      ;; SNSMAT
     765.  00:401A                      ;; Address  : #0141
     766.  00:401A                      ;; Function : Returns the value of the specified line from the keyboard matrix
     767.  00:401A                      ;; Input    : A  - for the specified line
     768.  00:401A                      ;; Output   : A  - for data (the bit corresponding to the pressed key will be 0)
     769.  00:401A                      ;; Registers: AF
     770.  00:401A  (00:0141)           snsmat equ 0x0141
     771.  00:401A                      
     772.  00:401A                      ;; PHYDIO
     773.  00:401A                      ;; Address  : #0144
     774.  00:401A                      ;; Function : Executes I/O for mass-storage media like diskettes
     775.  00:401A                      ;; Input    : A  - Drive number (0 = A:, 1 = B:, etc.)
     776.  00:401A                      ;;            B  - Number of sectors
     777.  00:401A                      ;;            C  - Media ID of the disk
     778.  00:401A                      ;;            DE - Begin sector
     779.  00:401A                      ;;            HL - Begin address in memory
     780.  00:401A                      ;;            F  - Set carry to write, unset carry to read
     781.  00:401A                      ;; Output   : A  - Error code (only when writing)
     782.  00:401A                      ;;                 0 = Write protected
     783.  00:401A                      ;;                 2 = Not ready
     784.  00:401A                      ;;                 4 = Data error
     785.  00:401A                      ;;                 6 = Seek error
     786.  00:401A                      ;;                 8 = Record not found
     787.  00:401A                      ;;                 10 = Write error
     788.  00:401A                      ;;                 12 = Bad parameter
     789.  00:401A                      ;;                 14 = Out of memory
     790.  00:401A                      ;;                 16 = Other error
     791.  00:401A                      ;;            B  - Number of sectors actually written or read
     792.  00:401A                      ;; Registers: All
     793.  00:401A                      ;; Remark   : Before the call is called, the Z-flag must be reset, and the execution
     794.  00:401A                      ;;            address which was in HL must be at the last stack address
     795.  00:401A                      ;;            By the way: In minimum configuration only a HOOK is available
     796.  00:401A  (00:0144)           phydio equ 0x0144
     797.  00:401A                      
     798.  00:401A                      ;; FORMAT
     799.  00:401A                      ;; Address  : #0147
     800.  00:401A                      ;; Function : Initialises mass-storage media like formatting of diskettes
     801.  00:401A                      ;; Registers: All
     802.  00:401A                      ;; Remark   : In minimum configuration only a HOOK is available
     803.  00:401A  (00:0147)           format equ 0x0147
     804.  00:401A                      
     805.  00:401A                      ;; ISFLIO
     806.  00:401A                      ;; Address  : #014A
     807.  00:401A                      ;; Function : Tests if I/O to device is taking place
     808.  00:401A                      ;; Output   : A  - #00 if not taking place
     809.  00:401A                      ;;             not #00 if taking place
     810.  00:401A                      ;; Registers: AF
     811.  00:401A  (00:014A)           isflio equ 0x014a
     812.  00:401A                      
     813.  00:401A                      ;; OUTDLP
     814.  00:401A                      ;; Address  : #014D
     815.  00:401A                      ;; Function : Printer output
     816.  00:401A                      ;; Input    : A  - code to print
     817.  00:401A                      ;; Registers: F
     818.  00:401A                      ;; Remark   : Differences with LPTOUT:
     819.  00:401A                      ;;            1. TAB is expanded to spaces
     820.  00:401A                      ;;            2. For non-MSX printers, Hiragana is transformed to katakana
     821.  00:401A                      ;;               and graphic characters are transformed to 1-byte characters
     822.  00:401A                      ;;            3. If failed, device I/O error occurs
     823.  00:401A  (00:014D)           outdlp equ 0x014d
     824.  00:401A                      
     825.  00:401A                      ;; GETVCP
     826.  00:401A                      ;; Address  : #0150
     827.  00:401A                      ;; Function : Returns pointer to play queue
     828.  00:401A                      ;; Input    : A  - Channel number
     829.  00:401A                      ;; Output   : HL - Pointer
     830.  00:401A                      ;; Registers: AF
     831.  00:401A                      ;; Remark   : Only used to play music in background
     832.  00:401A  (00:0150)           getvcp equ 0x0150
     833.  00:401A                      
     834.  00:401A                      ;; GETVC2
     835.  00:401A                      ;; Address  : #0153
     836.  00:401A                      ;; Function : Returns pointer to variable in queue number VOICEN (byte op #FB38)
     837.  00:401A                      ;; Input    : L  - Pointer in play buffer
     838.  00:401A                      ;; Output   : HL - Pointer
     839.  00:401A                      ;; Registers: AF
     840.  00:401A  (00:0153)           getvc2 equ 0x0153
     841.  00:401A                      
     842.  00:401A                      ;; KILBUF
     843.  00:401A                      ;; Address  : #0156
     844.  00:401A                      ;; Function : Clear keyboard buffer
     845.  00:401A                      ;; Registers: HL
     846.  00:401A  (00:0156)           kilbuf equ 0x0156
     847.  00:401A                      
     848.  00:401A                      ;; CALBAS
     849.  00:401A                      ;; Address  : #0159
     850.  00:401A                      ;; Function : Executes inter-slot call to the routine in BASIC interpreter
     851.  00:401A                      ;; Input    : IX - for the calling address
     852.  00:401A                      ;; Output   : Depends on the called routine
     853.  00:401A                      ;; Registers: Depends on the called routine
     854.  00:401A                      ;; MSX 2 BIOS Entries
     855.  00:401A  (00:0159)           calbas equ 0x0159
     856.  00:401A                      
     857.  00:401A                      ;; SUBROM
     858.  00:401A                      ;; Address  : #015C
     859.  00:401A                      ;; Function : Calls a routine in SUB-ROM
     860.  00:401A                      ;; Input    : IX - Address of routine in SUB-ROM
     861.  00:401A                      ;; Output   : Depends on the routine
     862.  00:401A                      ;; Registers: Alternative registers, IY
     863.  00:401A                      ;; Remark   : Use of EXTROM or CALSLT is more convenient.
     864.  00:401A                      ;;            In IX a extra value to the routine can be given by first
     865.  00:401A                      ;;            PUSH'ing it to the stack.
     866.  00:401A  (00:015C)           subrom equ 0x015c
     867.  00:401A                      
     868.  00:401A                      ;; EXTROM
     869.  00:401A                      ;; Address  : #015F
     870.  00:401A                      ;; Function : Calls a routine in SUB-ROM. Most common way
     871.  00:401A                      ;; Input    : IX - Address of routine in SUB-ROM
     872.  00:401A                      ;; Output   : Depends on the routine
     873.  00:401A                      ;; Registers: Alternative registers, IY
     874.  00:401A                      ;; Remark   : Use: LD IX,address
     875.  00:401A                      ;;                 CALL EXTROM
     876.  00:401A  (00:015F)           extrom equ 0x015f
     877.  00:401A                      
     878.  00:401A                      ;; CHKSLZ
     879.  00:401A                      ;; Address  : #0162
     880.  00:401A                      ;; Function : Search slots for SUB-ROM
     881.  00:401A                      ;; Registers: Alles
     882.  00:401A  (00:0162)           chkslz equ 0x0162
     883.  00:401A                      
     884.  00:401A                      ;; CHKNEW
     885.  00:401A                      ;; Address  : #0165
     886.  00:401A                      ;; Function : Tests screen mode
     887.  00:401A                      ;; Output   : C-flag set if screenmode = 5, 6, 7 or 8
     888.  00:401A                      ;; Registers: AF
     889.  00:401A  (00:0165)           chknew equ 0x0165
     890.  00:401A                      
     891.  00:401A                      ;; EOL
     892.  00:401A                      ;; Address  : #0168
     893.  00:401A                      ;; Function : Deletes to the end of the line
     894.  00:401A                      ;; Input    : H  - x-coordinate of cursor
     895.  00:401A                      ;;            L  - y-coordinate of cursor
     896.  00:401A                      ;; Registers: All
     897.  00:401A  (00:0168)           eol equ 0x0168
     898.  00:401A                      
     899.  00:401A                      ;; BIGFIL
     900.  00:401A                      ;; Address  : #016B
     901.  00:401A                      ;; Function : Same function as FILVRM (total VRAM can be reached).
     902.  00:401A                      ;; Input    : HL - address
     903.  00:401A                      ;;            BC - length
     904.  00:401A                      ;;            A  - data
     905.  00:401A                      ;; Registers: AF,BC
     906.  00:401A  (00:016B)           bigfil equ 0x016b
     907.  00:401A                      
     908.  00:401A                      ;; NSETRD
     909.  00:401A                      ;; Address  : #016E
     910.  00:401A                      ;; Function : Same function as SETRD.(with full 16 bits VRAM-address)
     911.  00:401A                      ;; Input    : HL - VRAM address
     912.  00:401A                      ;; Registers: AF
     913.  00:401A  (00:016E)           nsetrd equ 0x016e
     914.  00:401A                      
     915.  00:401A                      ;; NSTWRT
     916.  00:401A                      ;; Address  : #0171
     917.  00:401A                      ;; Function : Same function as SETWRT.(with full 16 bits VRAM-address)
     918.  00:401A                      ;; Input    : HL - VRAM address
     919.  00:401A                      ;; Registers: AF
     920.  00:401A  (00:0171)           nstwrt equ 0x0171
     921.  00:401A                      
     922.  00:401A                      ;; NRDVRM
     923.  00:401A                      ;; Address  : #0174
     924.  00:401A                      ;; Function : Reads VRAM like in RDVRM.(with full 16 bits VRAM-address)
     925.  00:401A                      ;; Input    : HL - VRAM address
     926.  00:401A                      ;; Output   : A  - Read value
     927.  00:401A                      ;; Registers: F
     928.  00:401A  (00:0174)           nrdvrm equ 0x0174
     929.  00:401A                      
     930.  00:401A                      ;; NWRVRM
     931.  00:401A                      ;; Address  : #0177
     932.  00:401A                      ;; Function : Writes to VRAM like in WRTVRM.(with full 16 bits VRAM-address)
     933.  00:401A                      ;; Input    : HL - VRAM address
     934.  00:401A                      ;;            A  - Value to write
     935.  00:401A                      ;; Registers: AF
     936.  00:401A                      ;; MSX 2+ BIOS Entries
     937.  00:401A  (00:0177)           nwrvrm equ 0x0177
     938.  00:401A                      
     939.  00:401A                      ;; RDBTST
     940.  00:401A                      ;; Address  : #017A
     941.  00:401A                      ;; Function : Read value of I/O poort #F4
     942.  00:401A                      ;; Input    : none
     943.  00:401A                      ;; Output   : A = value read
     944.  00:401A                      ;; Registers: AF
     945.  00:401A  (00:017A)           rdbtst equ 0x017a
     946.  00:401A                      
     947.  00:401A                      ;; WRBTST
     948.  00:401A                      ;; Address  : #017D
     949.  00:401A                      ;; Function : Write value to I/O poort #F4
     950.  00:401A                      ;; Input    : A = value to write
     951.  00:401A                      ;;            Bit 7 shows the MSX 2+ startup screen when reset, otherwise it's skipped.
     952.  00:401A                      ;; Output   : none
     953.  00:401A                      ;; Registers: none
     954.  00:401A                      ;; MSX turbo R BIOS Entries
     955.  00:401A  (00:017D)           wrbtst equ 0x017d
     956.  00:401A                      
     957.  00:401A                      ;; CHGCPU
     958.  00:401A                      ;; Address  : #0180
     959.  00:401A                      ;; Function : Changes CPU mode
     960.  00:401A                      ;; Input    : A = LED 0 0 0 0 0 x x
     961.  00:401A                      ;;                 |            0 0 = Z80 (ROM) mode
     962.  00:401A                      ;;                 |            0 1 = R800 ROM  mode
     963.  00:401A                      ;;                 |            1 0 = R800 DRAM mode
     964.  00:401A                      ;;                LED indicates whether the Turbo LED is switched with the CPU
     965.  00:401A                      ;; Output   : none
     966.  00:401A                      ;; Registers: none
     967.  00:401A  (00:0180)           chgcpu equ 0x0180
     968.  00:401A                      
     969.  00:401A                      ;; GETCPU
     970.  00:401A                      ;; Address  : #0183
     971.  00:401A                      ;; Function : Returns current CPU mode
     972.  00:401A                      ;; Input    : none
     973.  00:401A                      ;; Output   : A = 0 0 0 0 0 0 x x
     974.  00:401A                      ;;                            0 0 = Z80 (ROM) mode
     975.  00:401A                      ;;                            0 1 = R800 ROM  mode
     976.  00:401A                      ;;                            1 0 = R800 DRAM mode
     977.  00:401A                      ;; Registers: AF
     978.  00:401A  (00:0183)           getcpu equ 0x0183
     979.  00:401A                      
     980.  00:401A                      ;; PCMPLY
     981.  00:401A                      ;; Address  : #0186
     982.  00:401A                      ;; Function : Plays specified memory area through the PCM chip
     983.  00:401A                      ;; Input    : A = v 0 0 0 0 0 x x
     984.  00:401A                      ;;                |           | |
     985.  00:401A                      ;;                |           +-+-- Quality parameter (Speed: 0 = Fast)
     986.  00:401A                      ;;                +---------------- VRAM usage flag
     987.  00:401A                      ;;            HL= Start address in RAM or VRAM
     988.  00:401A                      ;;            BC= Length of area to play
     989.  00:401A                      ;;            D = Bit 0 = Bit 17 of area length when using VRAM
     990.  00:401A                      ;;            E = Bit 0 = Bit 17 os start address when using VRAM
     991.  00:401A                      ;; Output   : C-flag set when aborted with CTRL-STOP
     992.  00:401A                      ;; Registers: all
     993.  00:401A  (00:0186)           pcmply equ 0x0186
     994.  00:401A                      
     995.  00:401A                      ;; PCMREC
     996.  00:401A                      ;; Address  : #0189
     997.  00:401A                      ;; Function : Records audio using the PCM chip into the specified memory area
     998.  00:401A                      ;; Input    : A = v t t t t c x x
     999.  00:401A                      ;;                | | | | | | | |
    1000.  00:401A                      ;;                | | | | | | +-+-- Quality parameter (Speed: 0 = Fast)
    1001.  00:401A                      ;;                | | | | | +------ Zero-data compression
    1002.  00:401A                      ;;                | +-+-+-+-------- Treshold
    1003.  00:401A                      ;;                +---------------- VRAM usage flag
    1004.  00:401A                      ;;            HL= Start address in RAM or VRAM
    1005.  00:401A                      ;;            BC= Length of area to play
    1006.  00:401A                      ;;            D = Bit 0 = Bit 17 of area length when using VRAM
    1007.  00:401A                      ;;            E = Bit 0 = Bit 17 os start address when using VRAM
    1008.  00:401A                      ;; Output   : C-flag set when aborted with CTRL-STOP
    1009.  00:401A                      ;; Registers: all
    1010.  00:401A  (00:0189)           pcmrec equ 0x0189
      28   00:401A                        include sysvar.asm
       1.  00:401A                        ;; http://fms.komkon.org/MSX/Docs/SysArea.txt
       2.  00:401A                      
       3.  00:401A                        module sysvar
       4.  00:401A                      
       5.  00:401A  (00:F2E1)           drive   equ 0xf2e1 ;; current drive
       6.  00:401A  (00:F347)           nmbdrv  equ 0xf347 ;; total number of drivies
       7.  00:401A  (00:F355)           dpblst  equ 0xf355 ;; list of drive parameters block
       8.  00:401A  (00:F368)           setrom  equ 0xf368 ;; set disk-basic rom
       9.  00:401A  (00:F36B)           setram  equ 0xf36b ;; set system ram configuration
      10.  00:401A  (00:F36E)           sltmov  equ 0xf36e ;; inter slot move
      11.  00:401A  (00:F37D)           rombdos equ 0xf37d ;; rom bdos vector
      12.  00:401A  (00:F380)           rdprim  equ 0xf380 ;; read from basic slot
      13.  00:401A  (00:F385)           wrprim  equ 0xf385 ;; write to basic slot
      14.  00:401A  (00:F38C)           clprim  equ 0xf38c ;; call basic slot
      15.  00:401A  (00:F39A)           usrtab  equ 0xf39a ;; usr function starting addresses
      16.  00:401A  (00:F3AE)           linl40  equ 0xf3ae ;; screen width per line in screen 0
      17.  00:401A  (00:F3AF)           linl32  equ 0xf3af ;; screen width per line in screen 1
      18.  00:401A  (00:F3B0)           linlen  equ 0xf3b0 ;; current screen width per line
      19.  00:401A  (00:F3B1)           crtcnt  equ 0xf3b1 ;; number of lines of current screen
      20.  00:401A  (00:F3B2)           clmlst  equ 0xf3b2 ;; horizontal location in the case that items are divided by commas in print statement
      21.  00:401A  (00:F3B3)           txtnam  equ 0xf3b3 ;; pattern name tabte
      22.  00:401A  (00:F3B5)           txtcol  equ 0xf3b5 ;; color table
      23.  00:401A  (00:F3B7)           txtcgp  equ 0xf3b7 ;; pattern ganarator table
      24.  00:401A  (00:F3B9)           txtatr  equ 0xf3b9 ;; unused
      25.  00:401A  (00:F3BB)           txtpat  equ 0xf3bb ;; unused
      26.  00:401A  (00:F3BD)           t32nam  equ 0xf3bd ;; pattern name tabte
      27.  00:401A  (00:F3BF)           t32col  equ 0xf3bf ;; color table
      28.  00:401A  (00:F3C1)           t32cgp  equ 0xf3c1 ;; pattern ganarator table
      29.  00:401A  (00:F3C3)           t32atr  equ 0xf3c3 ;; sprite attribute table
      30.  00:401A  (00:F3C5)           t32pat  equ 0xf3c5 ;; sprite generator table
      31.  00:401A  (00:F3C7)           grpnam  equ 0xf3c7 ;; pattern name tabte
      32.  00:401A  (00:F3C9)           grpcol  equ 0xf3c9 ;; color table
      33.  00:401A  (00:F3CB)           grpcgp  equ 0xf3cb ;; pattern ganarator table
      34.  00:401A  (00:F3CD)           grpatr  equ 0xf3cd ;; sprite attribute table
      35.  00:401A  (00:F3CF)           grppat  equ 0xf3cf ;; sprite generator table
      36.  00:401A  (00:F3D1)           mltnam  equ 0xf3d1 ;; pattern name tabte
      37.  00:401A  (00:F3D3)           mltcol  equ 0xf3d3 ;; color table
      38.  00:401A  (00:F3D5)           mltcgp  equ 0xf3d5 ;; pattern ganarator table
      39.  00:401A  (00:F3D7)           mltatr  equ 0xf3d7 ;; sprite attribute table
      40.  00:401A  (00:F3D9)           mltpat  equ 0xf3d9 ;; sprite generator table
      41.  00:401A  (00:F3DB)           cliksw  equ 0xf3db ;; key click switch
      42.  00:401A  (00:F3DC)           csry    equ 0xf3dc ;; y-coordinate of cursor
      43.  00:401A  (00:F3DD)           csrx    equ 0xf3dd ;; x-coordinate of cursor
      44.  00:401A  (00:F3DE)           cnsdfg  equ 0xf3de ;; functon key display switch
      45.  00:401A  (00:F3DF)           rg0sav  equ 0xf3df
      46.  00:401A  (00:F3E0)           rg1sav  equ 0xf3e0
      47.  00:401A  (00:F3E1)           rg2sav  equ 0xf3e1
      48.  00:401A  (00:F3E2)           rg3sav  equ 0xf3e2
      49.  00:401A  (00:F3E3)           rg4sav  equ 0xf3e3
      50.  00:401A  (00:F3E4)           rg5sav  equ 0xf3e4
      51.  00:401A  (00:F3E5)           rg6sav  equ 0xf3e5
      52.  00:401A  (00:F3E6)           rg7sav  equ 0xf3e6
      53.  00:401A  (00:F3E7)           statfl  equ 0xf3e7 ;; stores vdp status (msx2- vdp status register 0
      54.  00:401A  (00:F3E8)           trgflg  equ 0xf3e8 ;; stories trigger button status of joystick
      55.  00:401A  (00:F3E9)           forclr  equ 0xf3e9 ;; foreground colour
      56.  00:401A  (00:F3EA)           bakclr  equ 0xf3ea ;; background colour
      57.  00:401A  (00:F3EB)           bdrclr  equ 0xf3eb ;; border colour
      58.  00:401A  (00:F3EC)           maxupd  equ 0xf3ec ;; jmp 0000 (used by circle statement
      59.  00:401A  (00:F3EF)           minupd  equ 0xf3ef ;; jmp 0000 (used by circle statement
      60.  00:401A  (00:F3F2)           atrbyt  equ 0xf3f2 ;; color code in csing graphic
      61.  00:401A  (00:F3F3)           queues  equ 0xf3f3 ;; points to queue table at the execution of play st.
      62.  00:401A  (00:F3F5)           frcnew  equ 0xf3f5 ;; db 255
      63.  00:401A  (00:F3F6)           scncnt  equ 0xf3f6 ;; interval for the key scan
      64.  00:401A  (00:F3F7)           repcnt  equ 0xf3f7 ;; delay until the auto-repeat of the key begins
      65.  00:401A  (00:F3F8)           putpnt  equ 0xf3f8 ;; dw keybuf points to adress to write in the key buffer
      66.  00:401A  (00:F3FA)           getpnt  equ 0xf3fa ;; dw keybuf points to adress to read from the key buffer
      67.  00:401A  (00:F3FC)           cs120   equ 0xf3fc ;; reading parameters
      68.  00:401A  (00:F406)           low     equ 0xf406
      69.  00:401A  (00:F408)           high    equ 0xf408
      70.  00:401A  (00:F40A)           header  equ 0xf40a
      71.  00:401A  (00:F40B)           aspct1  equ 0xf40b ;; 256/aspect ratio
      72.  00:401A  (00:F40D)           aspct2  equ 0xf40d ;; 256*aspect ratio
      73.  00:401A  (00:F40F)           endpgm  equ 0xf40f ;; db ":" dummy program end for resume next st.
      74.  00:401A  (00:F414)           errflg  equ 0xf414 ;; error number
      75.  00:401A  (00:F415)           lptpos  equ 0xf415 ;; position of printer head
      76.  00:401A  (00:F416)           prtflg  equ 0xf416 ;; flag whether to send to printer
      77.  00:401A  (00:F417)           ntmsxp  equ 0xf417 ;; =0 if msx printer
      78.  00:401A  (00:F418)           rawprt  equ 0xf418 ;; <>0 if printing is in 'raw mode'
      79.  00:401A  (00:F419)           vlzadr  equ 0xf419 ;; address of character replaced by val
      80.  00:401A  (00:F41B)           vlzdat  equ 0xf41b ;; character replaced with 0 by val
      81.  00:401A  (00:F41C)           curlin  equ 0xf41c ;; current execution line number of basic
      82.  00:401A  (00:F41F)           kbuf    equ 0xf41f ;; crunch buffer;translated into intermediate language from buf
      83.  00:401A  (00:F55D)           bufmin  equ 0xf55d ;; used in input st.
      84.  00:401A  (00:F55E)           buf     equ 0xf55e ;; buffer to store characters typed( in ascii code
      85.  00:401A  (00:F660)           endbuf  equ 0xf660 ;; preventoverflow of buf
      86.  00:401A  (00:F661)           ttypos  equ 0xf661 ;; virtual cursor location internally retained by basic
      87.  00:401A  (00:F662)           dimflg  equ 0xf662 ;; array flag
      88.  00:401A  (00:F663)           valtyp  equ 0xf663 ;; type indicator
      89.  00:401A  (00:F664)           oprtyp  equ 0xf664 ;; store operator number in the extended momentarily before operator application
      90.  00:401A  (00:F664)           dores   equ 0xf664 ;; indicates whether stored word can be crunched
      91.  00:401A  (00:F665)           donum   equ 0xf665 ;; flag for crunch
      92.  00:401A  (00:F666)           contxt  equ 0xf666 ;; text address used by cnrget
      93.  00:401A  (00:F668)           consav  equ 0xf668 ;; store token of constant after calling chrget
      94.  00:401A  (00:F669)           contyp  equ 0xf669 ;; type of stored constant
      95.  00:401A  (00:F66A)           conlo   equ 0xf66a ;; valu of stored constant
      96.  00:401A  (00:F672)           memsiz  equ 0xf672 ;; highest location in memory used by basic
      97.  00:401A  (00:F674)           stktop  equ 0xf674 ;; top location to be used for the stack
      98.  00:401A  (00:F676)           txttab  equ 0xf676 ;; starting address of basic text area
      99.  00:401A  (00:F678)           temppt  equ 0xf678 ;; starting address of unused area of temporary descriptor
     100.  00:401A  (00:F67A)           tempst  equ 0xf67a ;; temporary descriptors
     101.  00:401A  (00:F698)           dsctmp  equ 0xf698 ;; string descriptor wich is the result of string fun.
     102.  00:401A  (00:F69B)           fretop  equ 0xf69b ;; starting address of unused area of string area
     103.  00:401A  (00:F69D)           temp3   equ 0xf69d ;; used for garbage collection or by usr function
     104.  00:401A  (00:F69F)           temp8   equ 0xf69f ;; used for garbage collection
     105.  00:401A  (00:F6A1)           endfor  equ 0xf6a1 ;; next address of for st.
     106.  00:401A  (00:F6A3)           datlin  equ 0xf6a3 ;; line number of data st.read by read st.
     107.  00:401A  (00:F6A5)           subflg  equ 0xf6a5 ;; flag for array for usr fun.
     108.  00:401A  (00:F6A6)           usflg   equ 0xf6a6
     109.  00:401A  (00:F6A6)           flginp  equ 0xf6a6 ;; flag for input or read
     110.  00:401A  (00:F6A7)           temp    equ 0xf6a7 ;; location for temporary reservation for st.code
     111.  00:401A  (00:F6A9)           ptrflg  equ 0xf6a9 ;; =0 if no line number converted to pointers
     112.  00:401A  (00:F6AA)           autflg  equ 0xf6aa ;; auto mode flag
     113.  00:401A  (00:F6AB)           autlin  equ 0xf6ab ;; current line number for auto
     114.  00:401A  (00:F6AD)           autinc  equ 0xf6ad ;; increment for auto
     115.  00:401A  (00:F6AF)           savtxt  equ 0xf6af ;; text pointer for resume
     116.  00:401A  (00:F6B1)           savstk  equ 0xf6b1 ;; save stack when error occurs
     117.  00:401A  (00:F6B3)           errlin  equ 0xf6b3 ;; line where last error
     118.  00:401A  (00:F6B5)           dot     equ 0xf6b5 ;; current line for edit & list
     119.  00:401A  (00:F6B7)           errtxt  equ 0xf6b7 ;; text pointer for use by resume
     120.  00:401A  (00:F6B9)           onelin  equ 0xf6b9 ;; line to go when error
     121.  00:401A  (00:F6BB)           oneflg  equ 0xf6bb ;; =1 if executing an error trap routine
     122.  00:401A  (00:F6BC)           temp2   equ 0xf6bc
     123.  00:401A  (00:F6BE)           oldlin  equ 0xf6be ;; old line number set up ^c ...
     124.  00:401A  (00:F6C0)           oldtxt  equ 0xf6c0 ;; points st. to be executed next
     125.  00:401A  (00:F6C2)           vartab  equ 0xf6c2 ;; pointer to start of variable space
     126.  00:401A  (00:F6C4)           arytab  equ 0xf6c4 ;; pointer to begging of array table
     127.  00:401A  (00:F6C6)           strend  equ 0xf6c6 ;; end of storage in use
     128.  00:401A  (00:F6C8)           datptr  equ 0xf6c8 ;; data pointer
     129.  00:401A  (00:F6CA)           deftbl  equ 0xf6ca ;; default valtype for each letter
     130.  00:401A  (00:F6E4)           prmstk  equ 0xf6e4 ;; previous definition block on stack
     131.  00:401A  (00:F6E6)           prmlen  equ 0xf6e6 ;; number of bytes of objective table
     132.  00:401A  (00:F6E8)           parm1   equ 0xf6e8 ;; objective prameter definition table
     133.  00:401A  (00:F74C)           prmprv  equ 0xf74c ;; pointer to previous parameter block
     134.  00:401A  (00:F74E)           prmln2  equ 0xf74e ;; size of parameter block
     135.  00:401A  (00:F750)           parm2   equ 0xf750 ;; for parameter storage
     136.  00:401A  (00:F7B4)           prmflg  equ 0xf7b4 ;; flag to indicate whether parm1 was searching
     137.  00:401A  (00:F7B5)           aryta2  equ 0xf7b5 ;; end point of search
     138.  00:401A  (00:F7B7)           nofuns  equ 0xf7b7 ;; 0 if no function active
     139.  00:401A  (00:F7B8)           temp9   equ 0xf7b8 ;; location of temporary storage for garbage collection
     140.  00:401A  (00:F7BA)           funact  equ 0xf7ba ;; count of active functions
     141.  00:401A  (00:F7BC)           swptmp  equ 0xf7bc ;; value of first  variable in swap st.
     142.  00:401A  (00:F7C4)           trcflg  equ 0xf7c4 ;; 0 means no trace
     143.  00:401A  (00:F7C5)           fbuffr  equ 0xf7c5 ;; buffer for fout
     144.  00:401A  (00:F7F0)           dectmp  equ 0xf7f0 ;; used to transform decimal integer to floating point number
     145.  00:401A  (00:F7F2)           dectm2  equ 0xf7f2 ;; used at division routine execution
     146.  00:401A  (00:F7F4)           deccnt  equ 0xf7f4 ;; used at division routine execution
     147.  00:401A  (00:F7F6)           dac     equ 0xf7f6 ;; decimal accumulator
     148.  00:401A  (00:F806)           hold8   equ 0xf806 ;; registers for decimal multiplication
     149.  00:401A  (00:F836)           hold2   equ 0xf836
     150.  00:401A  (00:F83E)           hold    equ 0xf83e
     151.  00:401A  (00:F847)           arg     equ 0xf847 ;; area to set the value to be calculate with dac
     152.  00:401A  (00:F857)           rndx    equ 0xf857 ;; last random number
     153.  00:401A  (00:F85F)           maxfil  equ 0xf85f ;; high legal file number
     154.  00:401A  (00:F860)           filtab  equ 0xf860 ;; starting address of of file data area
     155.  00:401A  (00:F862)           nulbuf  equ 0xf862 ;; points to file 0 buffer ( used in save & load st.
     156.  00:401A  (00:F864)           ptrfil  equ 0xf864 ;; points to file data of currently accessing file
     157.  00:401A  (00:F866)           runflg  equ 0xf866 ;; non-zero for run after load
     158.  00:401A  (00:F866)           filnam  equ 0xf866 ;; name for files, name & others
     159.  00:401A  (00:F871)           filnm2  equ 0xf871 ;; second name for name
     160.  00:401A  (00:F87C)           nlonly  equ 0xf87c ;; <>0 when loading program
     161.  00:401A  (00:F87D)           savend  equ 0xf87d ;; end address for bsave
     162.  00:401A  (00:F87F)           fnkstr  equ 0xf87f ;; function key area
     163.  00:401A  (00:F91F)           cgpnt   equ 0xf91f ;; address to store charecter font in rom
     164.  00:401A  (00:F922)           nambas  equ 0xf922 ;; base address of current pattern name table
     165.  00:401A  (00:F924)           cgpbas  equ 0xf924 ;; base address of current pattern generator table
     166.  00:401A  (00:F926)           patbas  equ 0xf926 ;; base address of current sprite generator table
     167.  00:401A  (00:F928)           atrbas  equ 0xf928 ;; base address of current sprite attribute table
     168.  00:401A  (00:F92A)           cloc    equ 0xf92a
     169.  00:401A  (00:F92C)           cmask   equ 0xf92c
     170.  00:401A  (00:F92D)           mindel  equ 0xf92d
     171.  00:401A  (00:F92F)           maxdel  equ 0xf92f
     172.  00:401A  (00:F931)           aspect  equ 0xf931 ;; aspect ratio of the circle; set by <ratio> of circle
     173.  00:401A  (00:F933)           cencnt  equ 0xf933 ;; end count
     174.  00:401A  (00:F935)           clinef  equ 0xf935 ;; flag to draw line to centre
     175.  00:401A  (00:F936)           cnpnts  equ 0xf936 ;; point to be plottted
     176.  00:401A  (00:F938)           cplotf  equ 0xf938 ;; plot polarity flag
     177.  00:401A  (00:F939)           cpcnt   equ 0xf939 ;; 1/8 of number of points in circle
     178.  00:401A  (00:F93B)           cpcnt8  equ 0xf93b
     179.  00:401A  (00:F93D)           crcsum  equ 0xf93d
     180.  00:401A  (00:F93F)           cstcnt  equ 0xf93f
     181.  00:401A  (00:F941)           csclxy  equ 0xf941 ;; scale of x & y
     182.  00:401A  (00:F942)           csavea  equ 0xf942 ;; reservation area of advgrp
     183.  00:401A  (00:F944)           csavem  equ 0xf944 ;; reservation area of advgrp
     184.  00:401A  (00:F945)           cxoff   equ 0xf945 ;; x offset from center
     185.  00:401A  (00:F947)           cyoff   equ 0xf947 ;; y offset from center
     186.  00:401A  (00:F949)           lohmsk  equ 0xf949
     187.  00:401A  (00:F94A)           lohdir  equ 0xf94a
     188.  00:401A  (00:F94B)           lohadr  equ 0xf94b
     189.  00:401A  (00:F94D)           lohcnt  equ 0xf94d
     190.  00:401A  (00:F94F)           skpcnt  equ 0xf94f ;; skip count
     191.  00:401A  (00:F951)           movcnt  equ 0xf951 ;; movement count
     192.  00:401A  (00:F953)           pdirec  equ 0xf953 ;; direction of the paint
     193.  00:401A  (00:F954)           lfprog  equ 0xf954
     194.  00:401A  (00:F955)           rtprog  equ 0xf955
     195.  00:401A  (00:F956)           mcltab  equ 0xf956
     196.  00:401A  (00:F958)           mclflg  equ 0xf958 ;; play / draw
     197.  00:401A  (00:F959)           quetab  equ 0xf959
     198.  00:401A  (00:F971)           quebak  equ 0xf971
     199.  00:401A  (00:F975)           voicaq  equ 0xf975
     200.  00:401A  (00:F9F5)           voicbq  equ 0xf9f5
     201.  00:401A  (00:FA75)           voiccq  equ 0xfa75
     202.  00:401A  (00:FAF5)           dppage  equ 0xfaf5 ;; display page number
     203.  00:401A  (00:FAF6)           acpage  equ 0xfaf6 ;; active page number
     204.  00:401A  (00:FAF7)           avcsav  equ 0xfaf7 ;; reserves av control port
     205.  00:401A  (00:FAF8)           exbrsa  equ 0xfaf8 ;; sub_rom slot address
     206.  00:401A  (00:FAF9)           chrcnt  equ 0xfaf9 ;; character counter in the buffer; used in roman-kana translation
     207.  00:401A  (00:FAFA)           roma    equ 0xfafa ;; area to store character (japan version only
     208.  00:401A  (00:FAFC)           mode    equ 0xfafc ;; mode svitch for vram size
     209.  00:401A  (00:FAFD)           noruse  equ 0xfafd ;; unused
     210.  00:401A  (00:FAFE)           xsave   equ 0xfafe ;; [10000000 xxxxxxxx]
     211.  00:401A  (00:FB00)           ysave   equ 0xfb00 ;; [*0000000 yyyyyyyy] *-light pen interrupt request
     212.  00:401A  (00:FB02)           logopr  equ 0xfb02 ;; logical operation code data area used by rs-232c or disk drive
     213.  00:401A  (00:FB03)           rstmp   equ 0xfb03
     214.  00:401A  (00:FB03)           tocnt   equ 0xfb03
     215.  00:401A  (00:FB04)           rsfcb   equ 0xfb04
     216.  00:401A  (00:FB06)           rsiqln  equ 0xfb06
     217.  00:401A  (00:FB07)           mexbih  equ 0xfb07 ;; hook
     218.  00:401A  (00:FB0C)           oldstt  equ 0xfb0c ;; hook
     219.  00:401A  (00:FB12)           oldint  equ 0xfb12 ;; hook
     220.  00:401A  (00:FB17)           devnum  equ 0xfb17
     221.  00:401A  (00:FB18)           datcnt  equ 0xfb18 ;; hook
     222.  00:401A  (00:FB1B)           errors  equ 0xfb1b
     223.  00:401A  (00:FB1C)           flags   equ 0xfb1c
     224.  00:401A  (00:FB1D)           estbls  equ 0xfb1d
     225.  00:401A  (00:FB1E)           commsk  equ 0xfb1e
     226.  00:401A  (00:FB1F)           lstcom  equ 0xfb1f
     227.  00:401A  (00:FB20)           lstmod  equ 0xfb20
     228.  00:401A  (00:FB35)           prscnt  equ 0xfb35
     229.  00:401A  (00:FB36)           savsp   equ 0xfb36
     230.  00:401A  (00:FB38)           voicen  equ 0xfb38
     231.  00:401A  (00:FB39)           savvol  equ 0xfb39
     232.  00:401A  (00:FB3B)           mcllen  equ 0xfb3b
     233.  00:401A  (00:FB3C)           mclptr  equ 0xfb3c
     234.  00:401A  (00:FB3E)           queuen  equ 0xfb3e
     235.  00:401A  (00:FB3F)           musicf  equ 0xfb3f
     236.  00:401A  (00:FB40)           plycnt  equ 0xfb40
     237.  00:401A  (00:FB41)           vcba    equ 0xfb41
     238.  00:401A  (00:FB66)           vcbb    equ 0xfb66
     239.  00:401A  (00:FB8B)           vcbc    equ 0xfb8b
     240.  00:401A  (00:FBB0)           enstop  equ 0xfbb0 ;; <>0 if warm start enabled
     241.  00:401A  (00:FBB1)           basrom  equ 0xfbb1 ;; <>0 if basic is in rom
     242.  00:401A  (00:FBB2)           linttb  equ 0xfbb2 ;; line terminator table
     243.  00:401A  (00:FBCA)           fstpos  equ 0xfbca ;; first position for inlin
     244.  00:401A  (00:FBCC)           codsav  equ 0xfbcc ;; code save area for cursor
     245.  00:401A  (00:FBCD)           fnkswi  equ 0xfbcd ;; indicate which func key is displayed
     246.  00:401A  (00:FBCE)           fnkflg  equ 0xfbce ;; fkey which have subroutine
     247.  00:401A  (00:FBD8)           ongsbf  equ 0xfbd8 ;; global event flag
     248.  00:401A  (00:FBD9)           clikfl  equ 0xfbd9
     249.  00:401A  (00:FBDA)           oldkey  equ 0xfbda
     250.  00:401A  (00:FBE5)           newkey  equ 0xfbe5
     251.  00:401A  (00:FBF0)           keybuf  equ 0xfbf0 ;; key code buffer
     252.  00:401A  (00:FC18)           bufend  equ 0xfc18 ;; end of key buffer
     253.  00:401A  (00:FC18)           linwrk  equ 0xfc18
     254.  00:401A  (00:FC40)           patwrk  equ 0xfc40
     255.  00:401A  (00:FC48)           bottom  equ 0xfc48
     256.  00:401A  (00:FC4A)           himem   equ 0xfc4a
     257.  00:401A  (00:FC4C)           trptbl  equ 0xfc4c
     258.  00:401A  (00:FC9A)           rtycnt  equ 0xfc9a
     259.  00:401A  (00:FC9B)           intflg  equ 0xfc9b
     260.  00:401A  (00:FC9C)           pady    equ 0xfc9c
     261.  00:401A  (00:FC9D)           padx    equ 0xfc9d
     262.  00:401A  (00:FC9E)           jiffy   equ 0xfc9e
     263.  00:401A  (00:FCA0)           intval  equ 0xfca0
     264.  00:401A  (00:FCA2)           intcnt  equ 0xfca2
     265.  00:401A  (00:FCA4)           lowlim  equ 0xfca4
     266.  00:401A  (00:FCA5)           winwid  equ 0xfca5
     267.  00:401A  (00:FCA6)           grphed  equ 0xfca6 ;; flag for graph. char
     268.  00:401A  (00:FCA7)           esccnt  equ 0xfca7 ;; escape sequence counter
     269.  00:401A  (00:FCA8)           insflg  equ 0xfca8 ;; insert mode flag
     270.  00:401A  (00:FCA9)           csrsw   equ 0xfca9 ;; cursor display switch
     271.  00:401A  (00:FCAA)           cstyle  equ 0xfcaa ;; cursor style
     272.  00:401A  (00:FCAB)           capst   equ 0xfcab ;; capital status
     273.  00:401A  (00:FCAC)           kanast  equ 0xfcac ;; russian key status
     274.  00:401A  (00:FCAD)           kanamd  equ 0xfcad
     275.  00:401A  (00:FCAE)           flbmem  equ 0xfcae ;; 0 if loading basic programm
     276.  00:401A  (00:FCAF)           scrmod  equ 0xfcaf ;; screen mode
     277.  00:401A  (00:FCB0)           oldscr  equ 0xfcb0 ;; old screen mode
     278.  00:401A  (00:FCB1)           casprv  equ 0xfcb1
     279.  00:401A  (00:FCB2)           brdatr  equ 0xfcb2 ;; border color for paint
     280.  00:401A  (00:FCB3)           gxpos   equ 0xfcb3
     281.  00:401A  (00:FCB5)           gypos   equ 0xfcb5
     282.  00:401A  (00:FCB7)           grpacx  equ 0xfcb7
     283.  00:401A  (00:FCB9)           grpacy  equ 0xfcb9
     284.  00:401A  (00:FCBB)           drwflg  equ 0xfcbb
     285.  00:401A  (00:FCBC)           drwscl  equ 0xfcbc
     286.  00:401A  (00:FCBD)           drwang  equ 0xfcbd
     287.  00:401A  (00:FCBE)           runbnf  equ 0xfcbe ;; doing bload bsave or not
     288.  00:401A  (00:FCBF)           savent  equ 0xfcbf ;; start address for bsave
     289.  00:401A  (00:FCC1)           exptbl  equ 0xfcc1 ;; flag for expanded slot
     290.  00:401A  (00:FCC5)           slttbl  equ 0xfcc5 ;; current expanded slot reg
     291.  00:401A  (00:FCC9)           sltatr  equ 0xfcc9
     292.  00:401A  (00:FD09)           sltwrk  equ 0xfd09
     293.  00:401A  (00:FD89)           procnm  equ 0xfd89 ;; name of expanded statement
     294.  00:401A  (00:FD99)           device  equ 0xfd99 ;; device id for cartrige 0-3
      29   00:401A                        include uncompress.asm
       1.  00:401A                        module uncompress
       2.  00:401A                      
       3.  00:401A                      
       4.  00:401A                        ;;
       5.  00:401A                      	;; variables
       6.  00:401A                      	;;
       7.  00:401A  (00:C000)           ram_end # 256                   ; reusable ram
       8.  00:401A                      
       9.  00:401A                      
      10.  00:401A                        ;;
      11.  00:401A                        ;; to_vram
      12.  00:401A                        ;;
      13.  00:401A                        ;; in DE=compressed data ptr
      14.  00:401A                        ;; in HL=start vram addr
      15.  00:401A                      to_vram:
      16.  00:401A  F3                    di
      17.  00:401B  CD 53 00              call bios.setwrt
      18.  00:401E  D5                    push de
      19.  00:401F  DD E1                 pop ix
      20.  00:4021  CD 26 40              call to_vram_write
      21.  00:4024  FB                    ei
      22.  00:4025  C9                    ret
      23.  00:4026                      
      24.  00:4026                      
      25.  00:4026                        ;;
      26.  00:4026                        ;; to_vram_noset
      27.  00:4026                        ;;
      28.  00:4026                        ;; in DE=compressed data ptr
      29.  00:4026                      to_vram_write:
      30.  00:4026                        ;; bc=token count
      31.  00:4026  DD 4E 00              ld c,(ix+0)
      32.  00:4029  DD 46 01              ld b,(ix+1)
      33.  00:402C  DD 23                 inc ix
      34.  00:402E  DD 23                 inc ix
      35.  00:4030                      
      36.  00:4030                        ;; de=dest (256 bytes align)
      37.  00:4030  21 00 C0              ld hl,ram_end
      38.  00:4033  11 00 01              ld de,256
      39.  00:4036  19                    add hl,de
      40.  00:4037  2E 00                 ld l,0
      41.  00:4039  EB                    ex de,hl
      42.  00:403A                      
      43.  00:403A                        ;; uncompress loop
      44.  00:403A                      .loop:
      45.  00:403A                          ;; a=len
      46.  00:403A  DD 7E 00                ld a,(ix+0)
      47.  00:403D  DD 23                   inc ix
      48.  00:403F  B7                      or a
      49.  00:4040  28 14                   jr z,.skip
      50.  00:4042                      
      51.  00:4042  C5                          push bc
      52.  00:4043  47                          ld b,a                  ; b=back reference len
      53.  00:4044  DD 4E 00                    ld c,(ix+0)             ; c=back reference offset
      54.  00:4047  DD 23                       inc ix
      55.  00:4049                              ;; hl:addr = (de-backoffset) mod 256
      56.  00:4049  7B                          ld a,e
      57.  00:404A  91                          sub c
      58.  00:404B  6F                          ld l,a
      59.  00:404C  62                          ld h,d
      60.  00:404D                              ;; copy back reference
      61.  00:404D                      .loop2:
      62.  00:404D  7E                          ld a,(hl)
      63.  00:404E  2C                          inc l                         ; hl=hl mod 256
      64.  00:404F  D3 98                       out (0x98),a
      65.  00:4051  12                          ld (de),a
      66.  00:4052  1C                          inc e                         ; de=de mod 256
      67.  00:4053  10 F8                       djnz .loop2
      68.  00:4055  C1                          pop bc
      69.  00:4056                      
      70.  00:4056                      .skip:
      71.  00:4056                          ;; a=next char
      72.  00:4056  DD 7E 00                ld a,(ix+0)
      73.  00:4059                      
      74.  00:4059                          ;; write nextchar
      75.  00:4059  D3 98                   out (0x98),a
      76.  00:405B  12                      ld (de),a
      77.  00:405C  1C                      inc e
      78.  00:405D  DD 23                   inc ix
      79.  00:405F                      
      80.  00:405F                          ;; end?
      81.  00:405F  0B                      dec bc
      82.  00:4060  79                      ld a,c
      83.  00:4061  B0                      or b
      84.  00:4062                      
      85.  00:4062  20 D6                 jr nz,.loop
      86.  00:4064  C9                    ret
      30   00:4065                        include graphics.asm
       1.  00:4065                        module graphics
       2.  00:4065                      
       3.  00:4065                      
       4.  00:4065                        ;;
       5.  00:4065                        ;; tiles enums
       6.  00:4065                        ;;
       7.  00:4065  (00:0001)           tiles_floor:  equ 1
       8.  00:4065  (00:0002)           tiles_player:  equ 2
       9.  00:4065  (00:0003)           tiles_robot1:  equ 3
      10.  00:4065  (00:0004)           tiles_robot2:  equ 4
      11.  00:4065  (00:0005)           tiles_explosion:  equ 5
      12.  00:4065  (00:0006)           tiles_junk: equ 6
      13.  00:4065                      
      14.  00:4065                      
      15.  00:4065                        ;;
      16.  00:4065                        ;; clear
      17.  00:4065                        ;;
      18.  00:4065                      clear:
      19.  00:4065  2A C7 F3              ld hl,(sysvar.grpnam)
      20.  00:4068  11 20 00              ld de,32
      21.  00:406B  01 00 03              ld bc,768
      22.  00:406E  AF                    xor a
      23.  00:406F  C3 56 00              jp bios.filvrm
      24.  00:4072                      
      25.  00:4072                      
      26.  00:4072                        ;;
      27.  00:4072                        ;; print_text
      28.  00:4072                        ;;
      29.  00:4072                      print_text:
      30.  00:4072  F3                    di
      31.  00:4073  CD 53 00              call bios.setwrt
      32.  00:4076                      .loop:
      33.  00:4076  1A                    ld a,(de)
      34.  00:4077  B7                    or a
      35.  00:4078  28 05                 jr z,.exit
      36.  00:407A  13                    inc de
      37.  00:407B  D3 98                 out (0x98),a
      38.  00:407D  18 F7                 jr .loop
      39.  00:407F                      .exit:
      40.  00:407F  FB                    ei
      41.  00:4080  C9                    ret
      42.  00:4081                      
      43.  00:4081                      
      44.  00:4081                        ;;
      45.  00:4081                        ;; print_number8
      46.  00:4081                        ;;
      47.  00:4081                      print_number8:
      48.  00:4081  F3                    di
      49.  00:4082  D5                    push de
      50.  00:4083  CD 53 00              call bios.setwrt
      51.  00:4086  E1                    pop hl
      52.  00:4087  01 9C FF              ld bc,-100
      53.  00:408A  CD 99 40              call .num1
      54.  00:408D  0E F6                 ld c,-10
      55.  00:408F  CD 99 40              call .num1
      56.  00:4092  0E FF                 ld c,-1
      57.  00:4094  CD 99 40              call .num1
      58.  00:4097  FB                    ei
      59.  00:4098  C9                    ret
      60.  00:4099                      .num1:
      61.  00:4099  3E 2F                 ld a,47
      62.  00:409B                      .loop:
      63.  00:409B  3C                    inc a
      64.  00:409C  09                    add hl,bc
      65.  00:409D  38 FC                 jr c,.loop
      66.  00:409F  ED 42                 sbc hl,bc
      67.  00:40A1  D3 98                 out (0x98),a
      68.  00:40A3  C9                    ret
      69.  00:40A4                      
      70.  00:40A4                      
      71.  00:40A4                        ;;
      72.  00:40A4                        ;; print_number16
      73.  00:40A4                        ;;
      74.  00:40A4                      print_number16:
      75.  00:40A4  F3                    di
      76.  00:40A5  D5                    push de
      77.  00:40A6  CD 53 00              call bios.setwrt
      78.  00:40A9  E1                    pop hl
      79.  00:40AA  01 F0 D8            	ld bc,-10000
      80.  00:40AD  CD 99 40            	call print_number8.num1
      81.  00:40B0  01 18 FC            	ld bc,-1000
      82.  00:40B3  CD 99 40            	call print_number8.num1
      83.  00:40B6  01 9C FF              ld bc,-100
      84.  00:40B9  CD 99 40            	call print_number8.num1
      85.  00:40BC  0E F6               	ld c,-10
      86.  00:40BE  CD 99 40            	call print_number8.num1
      87.  00:40C1  0E FF               	ld c,-1
      88.  00:40C3  CD 99 40            	call print_number8.num1
      89.  00:40C6  FB                  	ei
      90.  00:40C7  C9                  	ret
      31   00:40C8                        include math.asm
       1.  00:40C8                        module math
       2.  00:40C8                      
       3.  00:40C8                      
       4.  00:40C8                        ;;
       5.  00:40C8                        ;; variables
       6.  00:40C8                        ;;
       7.  00:40C8  (00:C100)           random_seed:  #2
       8.  00:40C8                      
       9.  00:40C8                      
      10.  00:40C8                        ;;
      11.  00:40C8                        ;; random
      12.  00:40C8                        ;;
      13.  00:40C8                      random:
      14.  00:40C8  E5                    push hl
      15.  00:40C9  D5                    push de
      16.  00:40CA  2A 00 C1              ld hl,(random_seed)
      17.  00:40CD  ED 5F                 ld a,r
      18.  00:40CF  57                    ld d,a
      19.  00:40D0  5E                    ld e,(hl)
      20.  00:40D1  19                    add hl,de
      21.  00:40D2  85                    add a,l
      22.  00:40D3  AC                    xor h
      23.  00:40D4  22 00 C1              ld (random_seed),hl
      24.  00:40D7  D1                    pop de
      25.  00:40D8  E1                    pop hl
      26.  00:40D9  C9                    ret
      32   00:40DA                        include logo.asm
       1.  00:40DA                        module logo
       2.  00:40DA                      
       3.  00:40DA                      
       4.  00:40DA                        ;;
       5.  00:40DA                        ;; run
       6.  00:40DA                        ;;
       7.  00:40DA                      run:
       8.  00:40DA  CD 41 00              call bios.disscr
       9.  00:40DD  CD E6 40              call load_color
      10.  00:40E0  CD EF 40              call show_anim
      11.  00:40E3  C3 56 01              jp bios.kilbuf
      12.  00:40E6                      
      13.  00:40E6                      
      14.  00:40E6                        ;;
      15.  00:40E6                        ;; load_color
      16.  00:40E6                        ;;
      17.  00:40E6                      load_color:
      18.  00:40E6  11 4B 45              ld de,resources.logo_color
      19.  00:40E9  2A C9 F3              ld hl,(sysvar.grpcol)
      20.  00:40EC  C3 1A 40              jp uncompress.to_vram
      21.  00:40EF                      
      22.  00:40EF                      
      23.  00:40EF                        ;;
      24.  00:40EF                        ;; show_anim
      25.  00:40EF                        ;;
      26.  00:40EF                      show_anim:
      27.  00:40EF  06 02                 ld b,2
      28.  00:40F1                      .loop:
      29.  00:40F1  C5                    push bc
      30.  00:40F2  11 48 46             	ld de,resources.logo_frame1
      31.  00:40F5  CD 11 41              call show_frame
      32.  00:40F8  CD 44 00              call bios.enascr
      33.  00:40FB  11 42 48             	ld de,resources.logo_frame2
      34.  00:40FE  CD 11 41              call show_frame
      35.  00:4101  11 3E 4A            	ld de,resources.logo_frame3
      36.  00:4104  CD 11 41              call show_frame
      37.  00:4107  11 37 4C            	ld de,resources.logo_frame4
      38.  00:410A  CD 11 41              call show_frame
      39.  00:410D  C1                    pop bc
      40.  00:410E  10 E1                 djnz .loop
      41.  00:4110  C9                    ret
      42.  00:4111                      
      43.  00:4111                      
      44.  00:4111                        ;;
      45.  00:4111                        ;; show_frame
      46.  00:4111                        ;;
      47.  00:4111                      show_frame:
      48.  00:4111  2A CB F3              ld hl,(sysvar.grpcgp)
      49.  00:4114  76                    halt
      50.  00:4115  CD 1A 40              call uncompress.to_vram
      51.  00:4118  CD 1E 41              call wait
      52.  00:411B  C8                    ret z
      53.  00:411C  E1                    pop hl
      54.  00:411D  C9                    ret
      55.  00:411E                      
      56.  00:411E                      
      57.  00:411E                        ;;
      58.  00:411E                        ;; wait
      59.  00:411E                        ;;
      60.  00:411E                      wait:
      61.  00:411E  06 05                 ld b,5
      62.  00:4120                      .loop:
      63.  00:4120  CD 9C 00              call bios.chsns
      64.  00:4123  C0                    ret nz
      65.  00:4124  76                    halt
      66.  00:4125  10 F9                 djnz .loop
      67.  00:4127  C9                    ret
      33   00:4128                        include game.asm
       1.  00:4128                        module game
       2.  00:4128                      
       3.  00:4128                      
       4.  00:4128                        ;;
       5.  00:4128                        ;; init
       6.  00:4128                        ;;
       7.  00:4128                      init:
       8.  00:4128                        ;; screen 2
       9.  00:4128  3E 02                 ld a,2
      10.  00:412A  CD 5F 00              call bios.chgmod
      11.  00:412D                        ;; disable keyboard click
      12.  00:412D  AF                    xor a
      13.  00:412E  32 DB F3              ld (sysvar.cliksw),a
      14.  00:4131                        ;; change border color
      15.  00:4131  32 EB F3              ld (sysvar.bdrclr),a
      16.  00:4134  C3 62 00              jp bios.chgclr
      17.  00:4137                      
      18.  00:4137                      
      19.  00:4137                        ;;
      20.  00:4137                        ;; run
      21.  00:4137                        ;;
      22.  00:4137                      run:
      23.  00:4137  CD 56 01              call bios.kilbuf
      24.  00:413A  CD 41 00              call bios.disscr
      25.  00:413D  CD 49 41              call load_tiles
      26.  00:4140  CD 65 40              call graphics.clear
      27.  00:4143  CD 44 00              call bios.enascr
      28.  00:4146  C3 5B 41              jp start_game
      29.  00:4149                      
      30.  00:4149                      
      31.  00:4149                        ;;
      32.  00:4149                        ;; load_tiles
      33.  00:4149                        ;;
      34.  00:4149                      load_tiles:
      35.  00:4149                        ;; pattern
      36.  00:4149  11 31 4E              ld de,resources.tiles_pattern
      37.  00:414C  2A CB F3              ld hl,(sysvar.grpcgp)
      38.  00:414F  CD 1A 40              call uncompress.to_vram
      39.  00:4152                        ;; logo
      40.  00:4152  11 60 5B              ld de,resources.tiles_color
      41.  00:4155  2A C9 F3              ld hl,(sysvar.grpcol)
      42.  00:4158  C3 1A 40              jp uncompress.to_vram
      43.  00:415B                      
      44.  00:415B                      
      45.  00:415B                        ;;
      46.  00:415B                        ;; start_game
      47.  00:415B                        ;;
      48.  00:415B                      start_game:
      49.  00:415B  CD 95 41              call level.init
      50.  00:415E  CD 64 41              call show_level
      51.  00:4161  C3 72 41              jp game_loop
      52.  00:4164                      
      53.  00:4164                      
      54.  00:4164                        ;;
      55.  00:4164                        ;; show_level
      56.  00:4164                        ;;
      57.  00:4164                      show_level:
      58.  00:4164  76                    halt
      59.  00:4165  CD AD 41              call level.draw
      60.  00:4168  CD 13 42              call level.draw_level_title
      61.  00:416B  CD 9F 00              call bios.chget
      62.  00:416E  76                    halt
      63.  00:416F  C3 AD 41              jp level.draw
      64.  00:4172                      
      65.  00:4172                      
      66.  00:4172                        ;;
      67.  00:4172                        ;; game_loop
      68.  00:4172                        ;;
      69.  00:4172                      game_loop:
      70.  00:4172  CD A8 44              call player.update
      71.  00:4175  CD 3E 43              call robots.update
      72.  00:4178  CD E2 44              call player.collide
      73.  00:417B  CD 53 43              call robots.collide
      74.  00:417E  CD DD 44              call player.clear_pos_flag
      75.  00:4181  76                    halt
      76.  00:4182  18 EE                 jr game_loop
      77.  00:4184                      
      78.  00:4184                      
      79.  00:4184                        ;;
      80.  00:4184                        ;; game_over
      81.  00:4184                        ;;
      82.  00:4184                      game_over:
      83.  00:4184  76                    halt
      84.  00:4185  CD AD 41              call level.draw
      85.  00:4188  CD 0A 42              call level.draw_game_over
      86.  00:418B  CD 44 00              call bios.enascr
      87.  00:418E  CD 9F 00              call bios.chget
      88.  00:4191  76                    halt
      89.  00:4192  C3 AD 41              jp level.draw
      34   00:4195                        include level.asm
       1.  00:4195                        module level
       2.  00:4195                      
       3.  00:4195                      
       4.  00:4195                        ;;
       5.  00:4195                        ;; variables
       6.  00:4195                        ;;
       7.  00:4195  (00:C102)           current_level:  #1
       8.  00:4195                      
       9.  00:4195                      
      10.  00:4195                        ;;
      11.  00:4195                        ;; init
      12.  00:4195                        ;;
      13.  00:4195                      init:
      14.  00:4195  3E 01                 ld a,1
      15.  00:4197  32 02 C1              ld (current_level),a
      16.  00:419A  CD 0C 43              call robots.init
      17.  00:419D  CD 26 44              call player.init
      18.  00:41A0  CD 29 43              call robots.random_pos
      19.  00:41A3  21 E8 03              ld hl,1000
      20.  00:41A6  22 2F C2              ld (player.score),hl
      21.  00:41A9  22 31 C2              ld (player.hiscore),hl
      22.  00:41AC  C9                    ret
      23.  00:41AD                      
      24.  00:41AD                      
      25.  00:41AD                        ;;
      26.  00:41AD                        ;; draw
      27.  00:41AD                        ;;
      28.  00:41AD                      draw:
      29.  00:41AD  CD BD 41              call draw_floor
      30.  00:41B0                        ;; draw score
      31.  00:41B0  2A C7 F3              ld hl,(sysvar.grpnam)
      32.  00:41B3  11 F2 44              ld de,resources.msg_score
      33.  00:41B6  CD 72 40              call graphics.print_text
      34.  00:41B9  CD CC 41              call draw_score
      35.  00:41BC  C9                    ret
      36.  00:41BD                      
      37.  00:41BD                      
      38.  00:41BD                        ;;
      39.  00:41BD                        ;; draw_floor
      40.  00:41BD                        ;;
      41.  00:41BD                      draw_floor:
      42.  00:41BD  2A C7 F3              ld hl,(sysvar.grpnam)
      43.  00:41C0  11 20 00              ld de,32
      44.  00:41C3  19                    add hl,de
      45.  00:41C4  01 00 03              ld bc,768
      46.  00:41C7  3E 01                 ld a,1
      47.  00:41C9  C3 56 00              jp bios.filvrm
      48.  00:41CC                      
      49.  00:41CC                        ;;
      50.  00:41CC                        ;; draw_score
      51.  00:41CC                        ;;
      52.  00:41CC                      draw_score:
      53.  00:41CC                        ;; score
      54.  00:41CC  2A 2F C2              ld hl,(player.score)
      55.  00:41CF  EB                    ex de,hl
      56.  00:41D0  2A C7 F3              ld hl,(sysvar.grpnam)
      57.  00:41D3  01 06 00              ld bc,6
      58.  00:41D6  09                    add hl,bc
      59.  00:41D7  CD A4 40              call graphics.print_number16
      60.  00:41DA                      
      61.  00:41DA                        ;; hi-score
      62.  00:41DA  2A 31 C2              ld hl,(player.hiscore)
      63.  00:41DD  EB                    ex de,hl
      64.  00:41DE  2A C7 F3              ld hl,(sysvar.grpnam)
      65.  00:41E1  01 1A 00              ld bc,26
      66.  00:41E4  09                    add hl,bc
      67.  00:41E5  C3 A4 40              jp graphics.print_number16
      68.  00:41E8                      
      69.  00:41E8                      
      70.  00:41E8                        ;;
      71.  00:41E8                        ;; draw_title
      72.  00:41E8                        ;;
      73.  00:41E8                      draw_title:
      74.  00:41E8  C5                    push bc
      75.  00:41E9  2A C7 F3              ld hl,(sysvar.grpnam)
      76.  00:41EC  01 4A 01              ld bc,32*10+10
      77.  00:41EF  09                    add hl,bc
      78.  00:41F0  CD 72 40              call graphics.print_text
      79.  00:41F3                      
      80.  00:41F3  2A C7 F3              ld hl,(sysvar.grpnam)
      81.  00:41F6  01 2A 01              ld bc,32*9+10
      82.  00:41F9  09                    add hl,bc
      83.  00:41FA  D1                    pop de
      84.  00:41FB  D5                    push de
      85.  00:41FC  CD 72 40              call graphics.print_text
      86.  00:41FF                      
      87.  00:41FF  2A C7 F3              ld hl,(sysvar.grpnam)
      88.  00:4202  01 6A 01              ld bc,32*11+10
      89.  00:4205  09                    add hl,bc
      90.  00:4206  D1                    pop de
      91.  00:4207  C3 72 40              jp graphics.print_text
      92.  00:420A                      
      93.  00:420A                      
      94.  00:420A                        ;;
      95.  00:420A                        ;; draw_game_over
      96.  00:420A                        ;;
      97.  00:420A                      draw_game_over:
      98.  00:420A  11 2F 45              ld de,resources.msg_dead0
      99.  00:420D  01 3D 45              ld bc,resources.msg_dead1
     100.  00:4210  C3 E8 41              jp draw_title
     101.  00:4213                      
     102.  00:4213                      
     103.  00:4213                        ;;
     104.  00:4213                        ;; draw_level_title
     105.  00:4213                        ;;
     106.  00:4213                      draw_level_title:
     107.  00:4213  11 13 45              ld de,resources.msg_title0
     108.  00:4216  01 21 45              ld bc,resources.msg_title1
     109.  00:4219  CD E8 41              call draw_title
     110.  00:421C                        ;; score
     111.  00:421C  3A 02 C1              ld a,(current_level)
     112.  00:421F  16 00                 ld d,0
     113.  00:4221  5F                    ld e,a
     114.  00:4222  2A C7 F3              ld hl,(sysvar.grpnam)
     115.  00:4225  01 52 01              ld bc,32*10+18
     116.  00:4228  09                    add hl,bc
     117.  00:4229  C3 81 40              jp graphics.print_number8
     118.  00:422C                      
     119.  00:422C                      
     120.  00:422C                        ;;
     121.  00:422C                        ;; tile
     122.  00:422C                        ;;
     123.  00:422C                      tile:
     124.  00:422C  F5                    push af
     125.  00:422D                        ;; x
     126.  00:422D  DD 7E 00              ld a,(ix+0)
     127.  00:4230  5F                    ld e,a
     128.  00:4231  16 00                 ld d,0
     129.  00:4233                        ;; y
     130.  00:4233  DD 7E 01              ld a,(ix+1)
     131.  00:4236  6F                    ld l,a
     132.  00:4237  26 00                 ld h,0
     133.  00:4239  29                    add hl,hl
     134.  00:423A  29                    add hl,hl
     135.  00:423B  29                  	add hl,hl
     136.  00:423C  29                  	add hl,hl
     137.  00:423D  29                  	add hl,hl
     138.  00:423E                        ;; name table
     139.  00:423E  ED 5B C7 F3           ld de,(sysvar.grpnam)
     140.  00:4242  19                    add hl,de
     141.  00:4243  F1                    pop af
     142.  00:4244  C3 4D 00              jp bios.wrtvrm
     143.  00:4247                      
     144.  00:4247                      
     145.  00:4247                        ;;
     146.  00:4247                        ;; next
     147.  00:4247                        ;;
     148.  00:4247                      next:
     149.  00:4247  11 E8 03              ld de,1000
     150.  00:424A  CD 6A 44              call player.add_score
     151.  00:424D  21 02 C1              ld hl,current_level
     152.  00:4250  34                    inc (hl)
     153.  00:4251  CD 64 41              call game.show_level
     154.  00:4254  CD 0C 43              call robots.init
     155.  00:4257  CD 26 44              call player.init
     156.  00:425A  C3 29 43              jp robots.random_pos
      35   00:425D                        include collision.asm
       1.  00:425D                        module collision
       2.  00:425D                      
       3.  00:425D                      
       4.  00:425D                        ;;
       5.  00:425D                        ;; check_robot
       6.  00:425D                        ;;
       7.  00:425D                      check_robot:
       8.  00:425D  FD 7E 04              ld a,(iy+robot.state_offset)
       9.  00:4260  FE 03                 cp robot.state_dead
      10.  00:4262  28 1E                 jr z,.nocollision
      11.  00:4264                        ;; check ptr
      12.  00:4264  DD E5                 push ix
      13.  00:4266  E1                    pop hl
      14.  00:4267  FD E5                 push iy
      15.  00:4269  D1                    pop de
      16.  00:426A  B7                    or a
      17.  00:426B  ED 52                 sbc hl,de
      18.  00:426D  28 13                 jr z,.nocollision
      19.  00:426F                        ;; check x
      20.  00:426F  DD 7E 00              ld a,(ix+spr.x)
      21.  00:4272  FD BE 00              cp (iy+spr.x)
      22.  00:4275  20 0B                 jr nz,.nocollision
      23.  00:4277                        ;; check y
      24.  00:4277  DD 7E 01              ld a,(ix+spr.y)
      25.  00:427A  FD BE 01              cp (iy+spr.y)
      26.  00:427D  20 03                 jr nz,.nocollision
      27.  00:427F                        ;; collision
      28.  00:427F  3E 01                 ld a,1
      29.  00:4281  C9                    ret
      30.  00:4282                      .nocollision:
      31.  00:4282  AF                    xor a
      32.  00:4283  C9                    ret
      33.  00:4284                      
      34.  00:4284                      
      35.  00:4284                        ;;
      36.  00:4284                        ;; check_robots
      37.  00:4284                        ;;
      38.  00:4284                      check_robots:
      39.  00:4284  FD 21 03 C1           ld iy,robots.array
      40.  00:4288  06 3C                 ld b,robots.count
      41.  00:428A                      .loop:
      42.  00:428A  CD 5D 42              call check_robot
      43.  00:428D  B7                    or a
      44.  00:428E  C0                    ret nz
      45.  00:428F  11 05 00              ld de,robot.size
      46.  00:4292  FD 19                 add iy,de
      47.  00:4294  10 F4                 djnz .loop
      48.  00:4296  C9                    ret
      36   00:4297                        include spr.asm
       1.  00:4297                        module spr
       2.  00:4297                      
       3.  00:4297                      
       4.  00:4297                        ;;
       5.  00:4297                        ;; enums
       6.  00:4297                        ;;
       7.  00:4297  (00:0000)           x:  equ 0
       8.  00:4297  (00:0001)           y:  equ 1
       9.  00:4297                      
      10.  00:4297                      
      11.  00:4297                        ;;
      12.  00:4297                        ;; random_pos
      13.  00:4297                        ;;
      14.  00:4297                      random_pos:
      15.  00:4297                        ;; rnd x
      16.  00:4297  CD C8 40              call math.random
      17.  00:429A  E6 1F                 and 0x1f
      18.  00:429C  DD 77 00              ld (ix+spr.x),a
      19.  00:429F                        ;; rnd y
      20.  00:429F                      .loop:
      21.  00:429F  CD C8 40              call math.random
      22.  00:42A2  FE 17                 cp 23
      23.  00:42A4  3C                    inc a
      24.  00:42A5  30 F8                 jr nc,.loop
      25.  00:42A7  DD 77 01              ld (ix+spr.y),a
      26.  00:42AA  C9                    ret
      27.  00:42AB                      
      28.  00:42AB                      
      29.  00:42AB                        ;;
      30.  00:42AB                        ;; move_right
      31.  00:42AB                        ;;
      32.  00:42AB                      move_right:
      33.  00:42AB  DD 7E 00              ld a,(ix+x)
      34.  00:42AE  FE 1F                 cp 31
      35.  00:42B0  C8                    ret z
      36.  00:42B1  DD 34 00              inc (ix+x)
      37.  00:42B4  C9                    ret
      38.  00:42B5                      
      39.  00:42B5                      
      40.  00:42B5                        ;;
      41.  00:42B5                        ;; move_left
      42.  00:42B5                        ;;
      43.  00:42B5                      move_left:
      44.  00:42B5  DD 7E 00              ld a,(ix+x)
      45.  00:42B8  B7                    or a
      46.  00:42B9  C8                    ret z
      47.  00:42BA  DD 35 00              dec (ix+x)
      48.  00:42BD  C9                    ret
      49.  00:42BE                      
      50.  00:42BE                      
      51.  00:42BE                        ;;
      52.  00:42BE                        ;; move_up
      53.  00:42BE                        ;;
      54.  00:42BE                      move_up:
      55.  00:42BE  DD 7E 01              ld a,(ix+y)
      56.  00:42C1  FE 01                 cp 1
      57.  00:42C3  C8                    ret z
      58.  00:42C4  DD 35 01              dec (ix+y)
      59.  00:42C7  C9                    ret
      60.  00:42C8                      
      61.  00:42C8                      
      62.  00:42C8                        ;;
      63.  00:42C8                        ;; move_down
      64.  00:42C8                        ;;
      65.  00:42C8                      move_down:
      66.  00:42C8  DD 7E 01              ld a,(ix+y)
      67.  00:42CB  FE 17                 cp 23
      68.  00:42CD  C8                    ret z
      69.  00:42CE  DD 34 01              inc (ix+y)
      70.  00:42D1  C9                    ret
      71.  00:42D2                      
      72.  00:42D2                      
      73.  00:42D2                        ;;
      74.  00:42D2                        ;; draw
      75.  00:42D2                        ;;
      76.  00:42D2                      draw:
      77.  00:42D2  F5                    push af
      78.  00:42D3                        ;; x
      79.  00:42D3  DD 7E 00              ld a,(ix+x)
      80.  00:42D6  5F                    ld e,a
      81.  00:42D7  16 00                 ld d,0
      82.  00:42D9                        ;; y
      83.  00:42D9  DD 7E 01              ld a,(ix+y)
      84.  00:42DC  6F                    ld l,a
      85.  00:42DD  26 00                 ld h,0
      86.  00:42DF  29                    add hl,hl
      87.  00:42E0  29                    add hl,hl
      88.  00:42E1  29                  	add hl,hl
      89.  00:42E2  29                  	add hl,hl
      90.  00:42E3  29                    add hl,hl
      91.  00:42E4  19                    add hl,de
      92.  00:42E5                        ;; name table
      93.  00:42E5  ED 5B C7 F3           ld de,(sysvar.grpnam)
      94.  00:42E9  19                    add hl,de
      95.  00:42EA  F1                    pop af
      96.  00:42EB  C3 4D 00              jp bios.wrtvrm
      97.  00:42EE                      
      98.  00:42EE                      
      99.  00:42EE                        ;;
     100.  00:42EE                        ;; clear
     101.  00:42EE                        ;;
     102.  00:42EE                      clear:
     103.  00:42EE  3E 01                 ld a,graphics.tiles_floor
     104.  00:42F0  C3 D2 42              jp draw
     105.  00:42F3                      
     106.  00:42F3                      
     107.  00:42F3                        ;;
     108.  00:42F3                        ;; draw_player
     109.  00:42F3                        ;;
     110.  00:42F3                      draw_player:
     111.  00:42F3  3E 02                 ld a,graphics.tiles_player
     112.  00:42F5  C3 D2 42              jp draw
     113.  00:42F8                      
     114.  00:42F8                      
     115.  00:42F8                        ;;
     116.  00:42F8                        ;; draw_robot1
     117.  00:42F8                        ;;
     118.  00:42F8                      draw_robot1:
     119.  00:42F8  3E 03                 ld a,graphics.tiles_robot1
     120.  00:42FA  C3 D2 42              jp draw
     121.  00:42FD                      
     122.  00:42FD                      
     123.  00:42FD                        ;;
     124.  00:42FD                        ;; draw_robot2
     125.  00:42FD                        ;;
     126.  00:42FD                      draw_robot2:
     127.  00:42FD  3E 04                 ld a,graphics.tiles_robot2
     128.  00:42FF  C3 D2 42              jp draw
     129.  00:4302                      
     130.  00:4302                      
     131.  00:4302                        ;;
     132.  00:4302                        ;; draw_explosion
     133.  00:4302                        ;;
     134.  00:4302                      draw_explosion:
     135.  00:4302  3E 05                 ld a,graphics.tiles_explosion
     136.  00:4304  C3 D2 42              jp draw
     137.  00:4307                      
     138.  00:4307                      
     139.  00:4307                        ;;
     140.  00:4307                        ;; draw_junk
     141.  00:4307                        ;;
     142.  00:4307                      draw_junk:
     143.  00:4307  3E 06                 ld a,graphics.tiles_junk
     144.  00:4309  C3 D2 42              jp draw
      37   00:430C                        include robots.asm
       1.  00:430C                        module robots
       2.  00:430C                      
       3.  00:430C                      
       4.  00:430C                        ;;
       5.  00:430C                        ;; variables
       6.  00:430C                        ;;
       7.  00:430C  (00:003C)           count:  equ 60
       8.  00:430C  (00:C103)           array:  #count*robot.size
       9.  00:430C                      
      10.  00:430C                      
      11.  00:430C                        ;;
      12.  00:430C                        ;; init
      13.  00:430C                        ;;
      14.  00:430C                      init:
      15.  00:430C  DD 21 03 C1           ld ix,array
      16.  00:4310  06 3C                 ld b,count
      17.  00:4312                      .loop:
      18.  00:4312  CD 7C 43              call robot.init
      19.  00:4315  11 05 00              ld de,robot.size
      20.  00:4318  DD 19                 add ix,de
      21.  00:431A  10 F6                 djnz .loop
      22.  00:431C  C9                    ret
      23.  00:431D                      
      24.  00:431D                      
      25.  00:431D                        ;;
      26.  00:431D                        ;; level_robots_count
      27.  00:431D                        ;;
      28.  00:431D                      level_robots_count:
      29.  00:431D  3A 02 C1              ld a,(level.current_level)
      30.  00:4320  C6 09                 add a,9
      31.  00:4322  FE 3B                 cp 59
      32.  00:4324  20 02                 jr nz,.skip
      33.  00:4326  3E 3B                 ld a,59
      34.  00:4328                      .skip:
      35.  00:4328  C9                    ret
      36.  00:4329                      
      37.  00:4329                      
      38.  00:4329                        ;;
      39.  00:4329                        ;; random_pos
      40.  00:4329                        ;;
      41.  00:4329                      random_pos:
      42.  00:4329  CD 1D 43              call level_robots_count
      43.  00:432C  47                    ld b,a
      44.  00:432D  DD 21 03 C1           ld ix,array
      45.  00:4331                      .loop:
      46.  00:4331  C5                    push bc
      47.  00:4332  CD 8C 43              call robot.random_pos
      48.  00:4335  C1                    pop bc
      49.  00:4336  11 05 00              ld de,robot.size
      50.  00:4339  DD 19                 add ix,de
      51.  00:433B  10 F4                 djnz .loop
      52.  00:433D  C9                    ret
      53.  00:433E                      
      54.  00:433E                      
      55.  00:433E                        ;;
      56.  00:433E                        ;; update
      57.  00:433E                        ;;
      58.  00:433E                      update:
      59.  00:433E  DD 21 03 C1           ld ix,array
      60.  00:4342  06 3C                 ld b,count
      61.  00:4344                      .loop:
      62.  00:4344  C5                    push bc
      63.  00:4345  CD F9 43              call robot.update
      64.  00:4348  C1                    pop bc
      65.  00:4349  11 05 00              ld de,robot.size
      66.  00:434C  DD 19                 add ix,de
      67.  00:434E  10 F4                 djnz .loop
      68.  00:4350  C3 66 43              jp check_all_dead
      69.  00:4353                      
      70.  00:4353                      
      71.  00:4353                        ;;
      72.  00:4353                        ;; collide
      73.  00:4353                        ;;
      74.  00:4353                      collide:
      75.  00:4353  DD 21 03 C1           ld ix,array
      76.  00:4357  06 3C                 ld b,count
      77.  00:4359                      .loop:
      78.  00:4359  C5                    push bc
      79.  00:435A  CD 13 44              call robot.collide
      80.  00:435D  C1                    pop bc
      81.  00:435E  11 05 00              ld de,robot.size
      82.  00:4361  DD 19                 add ix,de
      83.  00:4363  10 F4                 djnz .loop
      84.  00:4365  C9                    ret
      85.  00:4366                      
      86.  00:4366                      
      87.  00:4366                        ;;
      88.  00:4366                        ;; check_all_dead
      89.  00:4366                        ;;
      90.  00:4366                      check_all_dead:
      91.  00:4366  DD 21 03 C1           ld ix,array
      92.  00:436A  11 05 00              ld de,robot.size
      93.  00:436D  06 3C                 ld b,count
      94.  00:436F                      .loop:
      95.  00:436F  DD 7E 04              ld a,(ix+robot.state_offset)
      96.  00:4372  FE 00                 cp robot.state_normal
      97.  00:4374  C8                    ret z
      98.  00:4375  DD 19                 add ix,de
      99.  00:4377  10 F6                 djnz .loop
     100.  00:4379  C3 47 42              jp level.next
      38   00:437C                      	include robot.asm
       1.  00:437C                        module robot
       2.  00:437C                      
       3.  00:437C                      
       4.  00:437C                        ;;
       5.  00:437C                        ;; enums
       6.  00:437C                        ;;
       7.  00:437C  (00:0005)           size:  equ 5
       8.  00:437C  (00:0002)           frame_index:  equ 2
       9.  00:437C  (00:0003)           frame_time: equ 3
      10.  00:437C  (00:0004)           state_offset:  equ 4
      11.  00:437C                      
      12.  00:437C  (00:0000)           state_normal: equ 0
      13.  00:437C  (00:0001)           state_explosion:  equ 1
      14.  00:437C  (00:0002)           state_junk: equ 2
      15.  00:437C  (00:0003)           state_dead:  equ 3
      16.  00:437C                      
      17.  00:437C                      
      18.  00:437C                        ;;
      19.  00:437C                        ;; init
      20.  00:437C                        ;;
      21.  00:437C                      init:
      22.  00:437C  DD 77 01              ld (ix+spr.y),a
      23.  00:437F  DD 36 02 00           ld (ix+frame_index),0
      24.  00:4383  DD 36 03 0A           ld (ix+frame_time),10
      25.  00:4387  DD 36 04 03           ld (ix+state_offset),state_dead
      26.  00:438B  C9                    ret
      27.  00:438C                      
      28.  00:438C                      
      29.  00:438C                        ;;
      30.  00:438C                        ;; random_pos
      31.  00:438C                        ;;
      32.  00:438C                      random_pos:
      33.  00:438C  06 32                 ld b,50
      34.  00:438E                      .loop:
      35.  00:438E  DD 36 04 00           ld (ix+state_offset),state_normal
      36.  00:4392  CD 97 42              call spr.random_pos
      37.  00:4395                        ;; check
      38.  00:4395  C5                    push bc
      39.  00:4396  CD 84 42              call collision.check_robots
      40.  00:4399  C1                    pop bc
      41.  00:439A  B7                    or a
      42.  00:439B  C8                    ret z
      43.  00:439C  10 F0                 djnz .loop
      44.  00:439E  DD 36 04 03           ld (ix+state_offset),state_dead
      45.  00:43A2  C9                    ret
      46.  00:43A3                      
      47.  00:43A3                      
      48.  00:43A3                        ;;
      49.  00:43A3                        ;; update_frame
      50.  00:43A3                        ;;
      51.  00:43A3                      update_frame:
      52.  00:43A3  DD 35 03              dec (ix+frame_time)
      53.  00:43A6  C0                    ret nz
      54.  00:43A7  DD 36 03 0A           ld (ix+frame_time),10
      55.  00:43AB  3E 01                 ld a,1
      56.  00:43AD  DD 96 02              sub (ix+frame_index)
      57.  00:43B0  DD 77 02              ld (ix+frame_index),a
      58.  00:43B3  C9                    ret
      59.  00:43B4                      
      60.  00:43B4                      
      61.  00:43B4                        ;;
      62.  00:43B4                        ;; update_pos_x
      63.  00:43B4                        ;;
      64.  00:43B4                      update_pos_x:
      65.  00:43B4  3A 33 C2              ld a,(player.x)
      66.  00:43B7  DD BE 00              cp (ix+spr.x)
      67.  00:43BA  C8                    ret z
      68.  00:43BB  DA B5 42              jp c,spr.move_left
      69.  00:43BE  C3 AB 42              jp spr.move_right
      70.  00:43C1                      
      71.  00:43C1                      
      72.  00:43C1                        ;;
      73.  00:43C1                        ;; update_pos_y
      74.  00:43C1                        ;;
      75.  00:43C1                      update_pos_y:
      76.  00:43C1  3A 34 C2              ld a,(player.y)
      77.  00:43C4  DD BE 01              cp (ix+spr.y)
      78.  00:43C7  C8                    ret z
      79.  00:43C8  DA BE 42              jp c,spr.move_up
      80.  00:43CB  C3 C8 42              jp spr.move_down
      81.  00:43CE                      
      82.  00:43CE                      
      83.  00:43CE                        ;;
      84.  00:43CE                        ;; update_pos
      85.  00:43CE                        ;;
      86.  00:43CE                      update_pos:
      87.  00:43CE  3A 35 C2              ld a,(player.moved)
      88.  00:43D1  B7                    or a
      89.  00:43D2  C8                    ret z
      90.  00:43D3  CD B4 43              call update_pos_x
      91.  00:43D6  C3 C1 43              jp update_pos_y
      92.  00:43D9                      
      93.  00:43D9                      
      94.  00:43D9                        ;;
      95.  00:43D9                        ;; update_collision
      96.  00:43D9                        ;;
      97.  00:43D9                      update_collision:
      98.  00:43D9  CD 84 42              call collision.check_robots
      99.  00:43DC  B7                    or a
     100.  00:43DD  C8                    ret z
     101.  00:43DE  DD 36 04 01           ld (ix+state_offset),state_explosion
     102.  00:43E2  C9                    ret
     103.  00:43E3                      
     104.  00:43E3                      
     105.  00:43E3                        ;;
     106.  00:43E3                        ;; update_normal
     107.  00:43E3                        ;;
     108.  00:43E3                      update_normal:
     109.  00:43E3  CD EE 42              call spr.clear
     110.  00:43E6  CD A3 43              call update_frame
     111.  00:43E9  CD CE 43              call update_pos
     112.  00:43EC  C3 1C 44              jp draw
     113.  00:43EF                      
     114.  00:43EF                      
     115.  00:43EF                        ;;
     116.  00:43EF                        ;; update_explosion
     117.  00:43EF                        ;;
     118.  00:43EF                      update_explosion:
     119.  00:43EF  DD 36 04 02           ld (ix+state_offset),state_junk
     120.  00:43F3  C3 02 43              jp spr.draw_explosion
     121.  00:43F6                      
     122.  00:43F6                      
     123.  00:43F6                        ;;
     124.  00:43F6                        ;; update_junk
     125.  00:43F6                        ;;
     126.  00:43F6                      update_junk:
     127.  00:43F6  C3 07 43              jp spr.draw_junk
     128.  00:43F9                      
     129.  00:43F9                      
     130.  00:43F9                        ;;
     131.  00:43F9                        ;; update
     132.  00:43F9                        ;;
     133.  00:43F9                      update:
     134.  00:43F9  DD 7E 04              ld a,(ix+state_offset)
     135.  00:43FC  FE 00                 cp state_normal
     136.  00:43FE  CA E3 43              jp z,update_normal
     137.  00:4401  FE 01                 cp state_explosion
     138.  00:4403  CA EF 43              jp z,update_explosion
     139.  00:4406  3A 35 C2              ld a,(player.moved)
     140.  00:4409  B7                    or a
     141.  00:440A  C8                    ret z
     142.  00:440B  DD 7E 04              ld a,(ix+state_offset)
     143.  00:440E  FE 02                 cp state_junk
     144.  00:4410  28 E4                 jr z,update_junk
     145.  00:4412  C9                    ret
     146.  00:4413                      
     147.  00:4413                      
     148.  00:4413                        ;;
     149.  00:4413                        ;; collide
     150.  00:4413                        ;;
     151.  00:4413                      collide:
     152.  00:4413  DD 7E 04              ld a,(ix+state_offset)
     153.  00:4416  FE 00                 cp state_normal
     154.  00:4418  C0                    ret nz
     155.  00:4419  C3 D9 43              jp update_collision
     156.  00:441C                      
     157.  00:441C                      
     158.  00:441C                        ;;
     159.  00:441C                        ;; draw
     160.  00:441C                        ;;
     161.  00:441C                      draw:
     162.  00:441C  DD 7E 02              ld a,(ix+frame_index)
     163.  00:441F  B7                    or a
     164.  00:4420  C2 FD 42              jp nz,spr.draw_robot2
     165.  00:4423  C3 F8 42              jp spr.draw_robot1
      39   00:4426                        include player.asm
       1.  00:4426                        module player
       2.  00:4426                      
       3.  00:4426                      
       4.  00:4426                        ;;
       5.  00:4426                        ;; variables
       6.  00:4426                        ;;
       7.  00:4426  (00:C22F)           score:   #2
       8.  00:4426  (00:C231)           hiscore: #2
       9.  00:4426  (00:C233)           x:       #1
      10.  00:4426  (00:C234)           y:       #1
      11.  00:4426  (00:C235)           moved:   #1
      12.  00:4426                      
      13.  00:4426                      
      14.  00:4426                        ;;
      15.  00:4426                        ;; enums
      16.  00:4426                        ;;
      17.  00:4426  (00:0002)           move_index: equ 2
      18.  00:4426                      
      19.  00:4426                      
      20.  00:4426                        ;;
      21.  00:4426                        ;; init
      22.  00:4426                        ;;
      23.  00:4426                      init:
      24.  00:4426  DD 21 33 C2           ld ix,x
      25.  00:442A  DD 36 02 00           ld (ix+move_index),0
      26.  00:442E  C3 C2 44              jp safe_teleport
      27.  00:4431                      
      28.  00:4431                      
      29.  00:4431                        ;;
      30.  00:4431                        ;; update_keyboard
      31.  00:4431                        ;;
      32.  00:4431                      update_keyboard:
      33.  00:4431  CD 9C 00              call bios.chsns
      34.  00:4434  C8                    ret z
      35.  00:4435  CD 9F 00              call bios.chget
      36.  00:4438  DD 36 02 01           ld (ix+move_index),1
      37.  00:443C  FE 1C                 cp 0x1c
      38.  00:443E  CA 84 44              jp z,move_right
      39.  00:4441  FE 1D                 cp 0x1d
      40.  00:4443  CA 8D 44              jp z,move_left
      41.  00:4446  FE 1E                 cp 0x1e
      42.  00:4448  CA 96 44              jp z,move_up
      43.  00:444B  FE 1F                 cp 0x1f
      44.  00:444D  CA 9F 44              jp z,move_down
      45.  00:4450  FE 4D                 cp 77
      46.  00:4452  CA C2 44              jp z,safe_teleport
      47.  00:4455  FE 6D                 cp 109
      48.  00:4457  CA C2 44              jp z,safe_teleport
      49.  00:445A  FE 20                 cp 0x20
      50.  00:445C  CA 64 44              jp z,wait
      51.  00:445F  DD 36 02 00           ld (ix+move_index),0
      52.  00:4463  C9                    ret
      53.  00:4464                      
      54.  00:4464                      
      55.  00:4464                        ;;
      56.  00:4464                        ;; wait
      57.  00:4464                        ;;
      58.  00:4464                      wait:
      59.  00:4464  11 FB FF              ld de,-5
      60.  00:4467  C3 6A 44              jp add_score
      61.  00:446A                      
      62.  00:446A                      
      63.  00:446A                        ;;
      64.  00:446A                        ;; add_score
      65.  00:446A                        ;;
      66.  00:446A                      add_score:
      67.  00:446A  2A 2F C2              ld hl,(score)
      68.  00:446D  19                    add hl,de
      69.  00:446E  22 2F C2              ld (score),hl
      70.  00:4471                        ;; check hi score
      71.  00:4471  2A 31 C2              ld hl,(hiscore)
      72.  00:4474  ED 5B 2F C2           ld de,(score)
      73.  00:4478  AF                    xor a
      74.  00:4479  ED 52                 sbc hl,de
      75.  00:447B  30 04                 jr nc,.noupdate
      76.  00:447D  ED 53 31 C2           ld (hiscore),de
      77.  00:4481                      .noupdate:
      78.  00:4481  C3 CC 41              jp level.draw_score
      79.  00:4484                      
      80.  00:4484                      
      81.  00:4484                        ;;
      82.  00:4484                        ;; move_right
      83.  00:4484                        ;;
      84.  00:4484                      move_right:
      85.  00:4484  11 F6 FF              ld de,-10
      86.  00:4487  CD 6A 44              call add_score
      87.  00:448A  C3 AB 42              jp spr.move_right
      88.  00:448D                      
      89.  00:448D                      
      90.  00:448D                        ;;
      91.  00:448D                        ;; move_left
      92.  00:448D                        ;;
      93.  00:448D                      move_left:
      94.  00:448D  11 F6 FF              ld de,-10
      95.  00:4490  CD 6A 44            	call add_score
      96.  00:4493  C3 B5 42            	jp spr.move_left
      97.  00:4496                      
      98.  00:4496                      
      99.  00:4496                        ;;
     100.  00:4496                        ;; move_up
     101.  00:4496                        ;;
     102.  00:4496                      move_up:
     103.  00:4496  11 F6 FF              ld de,-10
     104.  00:4499  CD 6A 44              call add_score
     105.  00:449C  C3 BE 42              jp spr.move_up
     106.  00:449F                      
     107.  00:449F                      
     108.  00:449F                        ;;
     109.  00:449F                        ;; move_down
     110.  00:449F                        ;;
     111.  00:449F                      move_down:
     112.  00:449F  11 F6 FF              ld de,-10
     113.  00:44A2  CD 6A 44              call add_score
     114.  00:44A5  C3 C8 42              jp spr.move_down
     115.  00:44A8                      
     116.  00:44A8                      
     117.  00:44A8                        ;;
     118.  00:44A8                        ;; update
     119.  00:44A8                        ;;
     120.  00:44A8                      update:
     121.  00:44A8  DD 21 33 C2           ld ix,x
     122.  00:44AC  CD EE 42              call spr.clear
     123.  00:44AF  CD 31 44              call update_keyboard
     124.  00:44B2  C3 F3 42              jp spr.draw_player
     125.  00:44B5                      
     126.  00:44B5                      
     127.  00:44B5                        ;;
     128.  00:44B5                        ;; teleport
     129.  00:44B5                        ;;
     130.  00:44B5                      teleport:
     131.  00:44B5  11 F6 FF              ld de,-10
     132.  00:44B8  CD 6A 44              call add_score
     133.  00:44BB  DD 36 02 00           ld (ix+move_index),0
     134.  00:44BF  C3 97 42              jp spr.random_pos
     135.  00:44C2                      
     136.  00:44C2                      
     137.  00:44C2                        ;;
     138.  00:44C2                        ;; safe_teleport
     139.  00:44C2                        ;;
     140.  00:44C2                      safe_teleport:
     141.  00:44C2  11 CE FF              ld de,-50
     142.  00:44C5  CD 6A 44              call add_score
     143.  00:44C8  DD 36 02 00           ld (ix+move_index),0
     144.  00:44CC  DD 21 33 C2           ld ix,x
     145.  00:44D0  CD 97 42              call spr.random_pos
     146.  00:44D3                      
     147.  00:44D3                      .loop:
     148.  00:44D3  CD 84 42              call collision.check_robots
     149.  00:44D6  B7                    or a
     150.  00:44D7  C8                    ret z
     151.  00:44D8  CD 97 42              call spr.random_pos
     152.  00:44DB  18 F6                 jr .loop
     153.  00:44DD                      
     154.  00:44DD                      
     155.  00:44DD                        ;;
     156.  00:44DD                        ;; clear_pos_flag
     157.  00:44DD                        ;;
     158.  00:44DD                      clear_pos_flag:
     159.  00:44DD  AF                    xor a
     160.  00:44DE  32 35 C2              ld (moved),a
     161.  00:44E1  C9                    ret
     162.  00:44E2                      
     163.  00:44E2                      
     164.  00:44E2                        ;;
     165.  00:44E2                        ;; collide
     166.  00:44E2                        ;;
     167.  00:44E2                      collide:
     168.  00:44E2  DD 21 33 C2           ld ix,x
     169.  00:44E6  CD 84 42              call collision.check_robots
     170.  00:44E9  B7                    or a
     171.  00:44EA  C8                    ret z
     172.  00:44EB  CD 84 41              call game.game_over
     173.  00:44EE  E1                    pop hl                        ; to avoid stack overflow
     174.  00:44EF  C3 5B 41              jp game.start_game
      40   00:44F2                        include resources.asm
       1.  00:44F2                        module resources
       2.  00:44F2                      
       3.  00:44F2                      
       4.  00:44F2                        ;;
       5.  00:44F2                        ;; strings
       6.  00:44F2                        ;;
       7.  00:44F2                      msg_score:
       8.  00:44F2                        db "SCORE      0     HI-SCORE      0", 0
       8.  00:44F2  53 43 4F 52 45 20 20 20 20 20 20 30 20 20 20 20 
       8.  00:4502  20 48 49 2D 53 43 4F 52 45 20 20 20 20 20 20 30 
       8.  00:4512  00 
       9.  00:4513                      msg_title0:
      10.  00:4513                        db "  LEVEL 000  ", 0
      10.  00:4513  20 20 4C 45 56 45 4C 20 30 30 30 20 20 00 
      11.  00:4521                      msg_title1:
      12.  00:4521                        db "             ", 0
      12.  00:4521  20 20 20 20 20 20 20 20 20 20 20 20 20 00 
      13.  00:452F                      msg_dead0:
      14.  00:452F                        db "  GAME OVER  ", 0
      14.  00:452F  20 20 47 41 4D 45 20 4F 56 45 52 20 20 00 
      15.  00:453D                      msg_dead1:
      16.  00:453D                        db "             ", 0
      16.  00:453D  20 20 20 20 20 20 20 20 20 20 20 20 20 00 
      17.  00:454B                      
      18.  00:454B                      
      19.  00:454B                        ;;
      20.  00:454B                        ;; logo
      21.  00:454B                        ;;
      22.  00:454B                      logo_color:
      23.  00:454B  (00FD)               incbin logofinal.col
      24.  00:4648                      logo_frame1:
      25.  00:4648  (01FA)               incbin logo1.pat
      26.  00:4842                      logo_frame2:
      27.  00:4842  (01FC)               incbin logo2.pat
      28.  00:4A3E                      logo_frame3:
      29.  00:4A3E  (01F9)               incbin logo3.pat
      30.  00:4C37                      logo_frame4:
      31.  00:4C37  (01FA)               incbin logo4.pat
      32.  00:4E31                      
      33.  00:4E31                      
      34.  00:4E31                        ;;
      35.  00:4E31                        ;; game tiles
      36.  00:4E31                        ;;
      37.  00:4E31                      tiles_pattern:
      38.  00:4E31  (0D2F)                incbin game.pat
      39.  00:5B60                      tiles_color:
      40.  00:5B60  (0305)                incbin game.col

    LABELS
-------------------------------------------------
00:00004000 X romheader
00:00004010   start
00:00000000 X bios.chkram
00:00000008 X bios.synchr
00:0000000C X bios.rdslt
00:00000010 X bios.chrgtr
00:00000014 X bios.wrslt
00:00000018 X bios.outdo
00:0000001C X bios.calslt
00:00000020 X bios.dcompr
00:00000024 X bios.enaslt
00:00000028 X bios.getypr
00:00000030 X bios.callf
00:00000038 X bios.keyint
00:0000003B X bios.initio
00:0000003E X bios.inifnk
00:00000041   bios.disscr
00:00000044   bios.enascr
00:00000047 X bios.wrtvdp
00:0000004A X bios.rdvrm
00:0000004D   bios.wrtvrm
00:00000050 X bios.setrd
00:00000053   bios.setwrt
00:00000056   bios.filvrm
00:00000059 X bios.ldirmv
00:0000005C X bios.ldirvm
00:0000005F   bios.chgmod
00:00000062   bios.chgclr
00:00000066 X bios.nmi
00:00000069 X bios.clrspr
00:0000006C X bios.initxt
00:0000006F X bios.init32
00:00000072 X bios.inigrp
00:00000075 X bios.inimlt
00:00000078 X bios.settxt
00:0000007B X bios.sett32
00:0000007E X bios.setgrp
00:00000081 X bios.setmlt
00:00000084 X bios.calpat
00:00000087 X bios.calatr
00:0000008A X bios.gspsiz
00:0000008D X bios.grpprt
00:00000090 X bios.gecini
00:00000093 X bios.wrtpsg
00:00000096 X bios.rdpsg
00:00000099 X bios.strtms
00:0000009C   bios.chsns
00:0000009F   bios.chget
00:000000A2 X bios.chput
00:000000A5 X bios.lptout
00:000000A8 X bios.lptstt
00:000000AB X bios.cnvchr
00:000000AE X bios.pinlin
00:000000B1 X bios.inlin
00:000000B4 X bios.qinlin
00:000000B7 X bios.breakx
00:000000BA X bios.iscntc
00:000000BD X bios.ckcntc
00:000000C0 X bios.beep
00:000000C3 X bios.cls
00:000000C6 X bios.posit
00:000000C9 X bios.fnksb
00:000000CC X bios.erafnk
00:000000CF X bios.dspfnk
00:000000D2 X bios.totext
00:000000D5 X bios.gtstck
00:000000D8 X bios.gttrig
00:000000DB X bios.gtpad
00:000000DE X bios.gtpdl
00:000000E1 X bios.tapion
00:000000E4 X bios.tapin
00:000000E7 X bios.tapiof
00:000000EA X bios.tapoon
00:000000ED X bios.tapout
00:000000F0 X bios.tapoof
00:000000F3 X bios.stmotr
00:000000F6 X bios.lftq
00:000000F9 X bios.putq
00:000000FC X bios.rightc
00:000000FF X bios.leftc
00:00000102 X bios.upc
00:00000105 X bios.tupc
00:00000108 X bios.downc
00:0000010B X bios.tdownc
00:0000010E X bios.scalxy
00:00000111 X bios.mapxy
00:00000114 X bios.fetchc
00:00000117 X bios.storec
00:0000011A X bios.setatr
00:0000011D X bios.readc
00:00000120 X bios.setc
00:00000123 X bios.nsetcx
00:00000126 X bios.gtaspc
00:00000129 X bios.pntini
00:0000012C X bios.scanr
00:0000012F X bios.scanl
00:00000132 X bios.chgcap
00:00000135 X bios.chgsnd
00:00000138 X bios.rslreg
00:0000013B X bios.wslreg
00:0000013E X bios.rdvdp
00:00000141 X bios.snsmat
00:00000144 X bios.phydio
00:00000147 X bios.format
00:0000014A X bios.isflio
00:0000014D X bios.outdlp
00:00000150 X bios.getvcp
00:00000153 X bios.getvc2
00:00000156   bios.kilbuf
00:00000159 X bios.calbas
00:0000015C X bios.subrom
00:0000015F X bios.extrom
00:00000162 X bios.chkslz
00:00000165 X bios.chknew
00:00000168 X bios.eol
00:0000016B X bios.bigfil
00:0000016E X bios.nsetrd
00:00000171 X bios.nstwrt
00:00000174 X bios.nrdvrm
00:00000177 X bios.nwrvrm
00:0000017A X bios.rdbtst
00:0000017D X bios.wrbtst
00:00000180 X bios.chgcpu
00:00000183 X bios.getcpu
00:00000186 X bios.pcmply
00:00000189 X bios.pcmrec
00:0000F2E1 X sysvar.drive
00:0000F347 X sysvar.nmbdrv
00:0000F355 X sysvar.dpblst
00:0000F368 X sysvar.setrom
00:0000F36B X sysvar.setram
00:0000F36E X sysvar.sltmov
00:0000F37D X sysvar.rombdos
00:0000F380 X sysvar.rdprim
00:0000F385 X sysvar.wrprim
00:0000F38C X sysvar.clprim
00:0000F39A X sysvar.usrtab
00:0000F3AE X sysvar.linl40
00:0000F3AF X sysvar.linl32
00:0000F3B0 X sysvar.linlen
00:0000F3B1 X sysvar.crtcnt
00:0000F3B2 X sysvar.clmlst
00:0000F3B3 X sysvar.txtnam
00:0000F3B5 X sysvar.txtcol
00:0000F3B7 X sysvar.txtcgp
00:0000F3B9 X sysvar.txtatr
00:0000F3BB X sysvar.txtpat
00:0000F3BD X sysvar.t32nam
00:0000F3BF X sysvar.t32col
00:0000F3C1 X sysvar.t32cgp
00:0000F3C3 X sysvar.t32atr
00:0000F3C5 X sysvar.t32pat
00:0000F3C7   sysvar.grpnam
00:0000F3C9   sysvar.grpcol
00:0000F3CB   sysvar.grpcgp
00:0000F3CD X sysvar.grpatr
00:0000F3CF X sysvar.grppat
00:0000F3D1 X sysvar.mltnam
00:0000F3D3 X sysvar.mltcol
00:0000F3D5 X sysvar.mltcgp
00:0000F3D7 X sysvar.mltatr
00:0000F3D9 X sysvar.mltpat
00:0000F3DB   sysvar.cliksw
00:0000F3DC X sysvar.csry
00:0000F3DD X sysvar.csrx
00:0000F3DE X sysvar.cnsdfg
00:0000F3DF X sysvar.rg0sav
00:0000F3E0 X sysvar.rg1sav
00:0000F3E1 X sysvar.rg2sav
00:0000F3E2 X sysvar.rg3sav
00:0000F3E3 X sysvar.rg4sav
00:0000F3E4 X sysvar.rg5sav
00:0000F3E5 X sysvar.rg6sav
00:0000F3E6 X sysvar.rg7sav
00:0000F3E7 X sysvar.statfl
00:0000F3E8 X sysvar.trgflg
00:0000F3E9 X sysvar.forclr
00:0000F3EA X sysvar.bakclr
00:0000F3EB   sysvar.bdrclr
00:0000F3EC X sysvar.maxupd
00:0000F3EF X sysvar.minupd
00:0000F3F2 X sysvar.atrbyt
00:0000F3F3 X sysvar.queues
00:0000F3F5 X sysvar.frcnew
00:0000F3F6 X sysvar.scncnt
00:0000F3F7 X sysvar.repcnt
00:0000F3F8 X sysvar.putpnt
00:0000F3FA X sysvar.getpnt
00:0000F3FC X sysvar.cs120
00:0000F406 X sysvar.low
00:0000F408 X sysvar.high
00:0000F40A X sysvar.header
00:0000F40B X sysvar.aspct1
00:0000F40D X sysvar.aspct2
00:0000F40F X sysvar.endpgm
00:0000F414 X sysvar.errflg
00:0000F415 X sysvar.lptpos
00:0000F416 X sysvar.prtflg
00:0000F417 X sysvar.ntmsxp
00:0000F418 X sysvar.rawprt
00:0000F419 X sysvar.vlzadr
00:0000F41B X sysvar.vlzdat
00:0000F41C X sysvar.curlin
00:0000F41F X sysvar.kbuf
00:0000F55D X sysvar.bufmin
00:0000F55E X sysvar.buf
00:0000F660 X sysvar.endbuf
00:0000F661 X sysvar.ttypos
00:0000F662 X sysvar.dimflg
00:0000F663 X sysvar.valtyp
00:0000F664 X sysvar.oprtyp
00:0000F664 X sysvar.dores
00:0000F665 X sysvar.donum
00:0000F666 X sysvar.contxt
00:0000F668 X sysvar.consav
00:0000F669 X sysvar.contyp
00:0000F66A X sysvar.conlo
00:0000F672 X sysvar.memsiz
00:0000F674 X sysvar.stktop
00:0000F676 X sysvar.txttab
00:0000F678 X sysvar.temppt
00:0000F67A X sysvar.tempst
00:0000F698 X sysvar.dsctmp
00:0000F69B X sysvar.fretop
00:0000F69D X sysvar.temp3
00:0000F69F X sysvar.temp8
00:0000F6A1 X sysvar.endfor
00:0000F6A3 X sysvar.datlin
00:0000F6A5 X sysvar.subflg
00:0000F6A6 X sysvar.usflg
00:0000F6A6 X sysvar.flginp
00:0000F6A7 X sysvar.temp
00:0000F6A9 X sysvar.ptrflg
00:0000F6AA X sysvar.autflg
00:0000F6AB X sysvar.autlin
00:0000F6AD X sysvar.autinc
00:0000F6AF X sysvar.savtxt
00:0000F6B1 X sysvar.savstk
00:0000F6B3 X sysvar.errlin
00:0000F6B5 X sysvar.dot
00:0000F6B7 X sysvar.errtxt
00:0000F6B9 X sysvar.onelin
00:0000F6BB X sysvar.oneflg
00:0000F6BC X sysvar.temp2
00:0000F6BE X sysvar.oldlin
00:0000F6C0 X sysvar.oldtxt
00:0000F6C2 X sysvar.vartab
00:0000F6C4 X sysvar.arytab
00:0000F6C6 X sysvar.strend
00:0000F6C8 X sysvar.datptr
00:0000F6CA X sysvar.deftbl
00:0000F6E4 X sysvar.prmstk
00:0000F6E6 X sysvar.prmlen
00:0000F6E8 X sysvar.parm1
00:0000F74C X sysvar.prmprv
00:0000F74E X sysvar.prmln2
00:0000F750 X sysvar.parm2
00:0000F7B4 X sysvar.prmflg
00:0000F7B5 X sysvar.aryta2
00:0000F7B7 X sysvar.nofuns
00:0000F7B8 X sysvar.temp9
00:0000F7BA X sysvar.funact
00:0000F7BC X sysvar.swptmp
00:0000F7C4 X sysvar.trcflg
00:0000F7C5 X sysvar.fbuffr
00:0000F7F0 X sysvar.dectmp
00:0000F7F2 X sysvar.dectm2
00:0000F7F4 X sysvar.deccnt
00:0000F7F6 X sysvar.dac
00:0000F806 X sysvar.hold8
00:0000F836 X sysvar.hold2
00:0000F83E X sysvar.hold
00:0000F847 X sysvar.arg
00:0000F857 X sysvar.rndx
00:0000F85F X sysvar.maxfil
00:0000F860 X sysvar.filtab
00:0000F862 X sysvar.nulbuf
00:0000F864 X sysvar.ptrfil
00:0000F866 X sysvar.runflg
00:0000F866 X sysvar.filnam
00:0000F871 X sysvar.filnm2
00:0000F87C X sysvar.nlonly
00:0000F87D X sysvar.savend
00:0000F87F X sysvar.fnkstr
00:0000F91F X sysvar.cgpnt
00:0000F922 X sysvar.nambas
00:0000F924 X sysvar.cgpbas
00:0000F926 X sysvar.patbas
00:0000F928 X sysvar.atrbas
00:0000F92A X sysvar.cloc
00:0000F92C X sysvar.cmask
00:0000F92D X sysvar.mindel
00:0000F92F X sysvar.maxdel
00:0000F931 X sysvar.aspect
00:0000F933 X sysvar.cencnt
00:0000F935 X sysvar.clinef
00:0000F936 X sysvar.cnpnts
00:0000F938 X sysvar.cplotf
00:0000F939 X sysvar.cpcnt
00:0000F93B X sysvar.cpcnt8
00:0000F93D X sysvar.crcsum
00:0000F93F X sysvar.cstcnt
00:0000F941 X sysvar.csclxy
00:0000F942 X sysvar.csavea
00:0000F944 X sysvar.csavem
00:0000F945 X sysvar.cxoff
00:0000F947 X sysvar.cyoff
00:0000F949 X sysvar.lohmsk
00:0000F94A X sysvar.lohdir
00:0000F94B X sysvar.lohadr
00:0000F94D X sysvar.lohcnt
00:0000F94F X sysvar.skpcnt
00:0000F951 X sysvar.movcnt
00:0000F953 X sysvar.pdirec
00:0000F954 X sysvar.lfprog
00:0000F955 X sysvar.rtprog
00:0000F956 X sysvar.mcltab
00:0000F958 X sysvar.mclflg
00:0000F959 X sysvar.quetab
00:0000F971 X sysvar.quebak
00:0000F975 X sysvar.voicaq
00:0000F9F5 X sysvar.voicbq
00:0000FA75 X sysvar.voiccq
00:0000FAF5 X sysvar.dppage
00:0000FAF6 X sysvar.acpage
00:0000FAF7 X sysvar.avcsav
00:0000FAF8 X sysvar.exbrsa
00:0000FAF9 X sysvar.chrcnt
00:0000FAFA X sysvar.roma
00:0000FAFC X sysvar.mode
00:0000FAFD X sysvar.noruse
00:0000FAFE X sysvar.xsave
00:0000FB00 X sysvar.ysave
00:0000FB02 X sysvar.logopr
00:0000FB03 X sysvar.rstmp
00:0000FB03 X sysvar.tocnt
00:0000FB04 X sysvar.rsfcb
00:0000FB06 X sysvar.rsiqln
00:0000FB07 X sysvar.mexbih
00:0000FB0C X sysvar.oldstt
00:0000FB12 X sysvar.oldint
00:0000FB17 X sysvar.devnum
00:0000FB18 X sysvar.datcnt
00:0000FB1B X sysvar.errors
00:0000FB1C X sysvar.flags
00:0000FB1D X sysvar.estbls
00:0000FB1E X sysvar.commsk
00:0000FB1F X sysvar.lstcom
00:0000FB20 X sysvar.lstmod
00:0000FB35 X sysvar.prscnt
00:0000FB36 X sysvar.savsp
00:0000FB38 X sysvar.voicen
00:0000FB39 X sysvar.savvol
00:0000FB3B X sysvar.mcllen
00:0000FB3C X sysvar.mclptr
00:0000FB3E X sysvar.queuen
00:0000FB3F X sysvar.musicf
00:0000FB40 X sysvar.plycnt
00:0000FB41 X sysvar.vcba
00:0000FB66 X sysvar.vcbb
00:0000FB8B X sysvar.vcbc
00:0000FBB0 X sysvar.enstop
00:0000FBB1 X sysvar.basrom
00:0000FBB2 X sysvar.linttb
00:0000FBCA X sysvar.fstpos
00:0000FBCC X sysvar.codsav
00:0000FBCD X sysvar.fnkswi
00:0000FBCE X sysvar.fnkflg
00:0000FBD8 X sysvar.ongsbf
00:0000FBD9 X sysvar.clikfl
00:0000FBDA X sysvar.oldkey
00:0000FBE5 X sysvar.newkey
00:0000FBF0 X sysvar.keybuf
00:0000FC18 X sysvar.bufend
00:0000FC18 X sysvar.linwrk
00:0000FC40 X sysvar.patwrk
00:0000FC48 X sysvar.bottom
00:0000FC4A X sysvar.himem
00:0000FC4C X sysvar.trptbl
00:0000FC9A X sysvar.rtycnt
00:0000FC9B X sysvar.intflg
00:0000FC9C X sysvar.pady
00:0000FC9D X sysvar.padx
00:0000FC9E X sysvar.jiffy
00:0000FCA0 X sysvar.intval
00:0000FCA2 X sysvar.intcnt
00:0000FCA4 X sysvar.lowlim
00:0000FCA5 X sysvar.winwid
00:0000FCA6 X sysvar.grphed
00:0000FCA7 X sysvar.esccnt
00:0000FCA8 X sysvar.insflg
00:0000FCA9 X sysvar.csrsw
00:0000FCAA X sysvar.cstyle
00:0000FCAB X sysvar.capst
00:0000FCAC X sysvar.kanast
00:0000FCAD X sysvar.kanamd
00:0000FCAE X sysvar.flbmem
00:0000FCAF X sysvar.scrmod
00:0000FCB0 X sysvar.oldscr
00:0000FCB1 X sysvar.casprv
00:0000FCB2 X sysvar.brdatr
00:0000FCB3 X sysvar.gxpos
00:0000FCB5 X sysvar.gypos
00:0000FCB7 X sysvar.grpacx
00:0000FCB9 X sysvar.grpacy
00:0000FCBB X sysvar.drwflg
00:0000FCBC X sysvar.drwscl
00:0000FCBD X sysvar.drwang
00:0000FCBE X sysvar.runbnf
00:0000FCBF X sysvar.savent
00:0000FCC1 X sysvar.exptbl
00:0000FCC5 X sysvar.slttbl
00:0000FCC9 X sysvar.sltatr
00:0000FD09 X sysvar.sltwrk
00:0000FD89 X sysvar.procnm
00:0000FD99 X sysvar.device
00:0000C000   uncompress.ram_end
00:0000401A   uncompress.to_vram
00:00004026   uncompress.to_vram_write
00:0000403A   uncompress.to_vram_write.loop
00:0000404D   uncompress.to_vram_write.loop2
00:00004056   uncompress.to_vram_write.skip
00:00000001   graphics.tiles_floor
00:00000002   graphics.tiles_player
00:00000003   graphics.tiles_robot1
00:00000004   graphics.tiles_robot2
00:00000005   graphics.tiles_explosion
00:00000006   graphics.tiles_junk
00:00004065   graphics.clear
00:00004072   graphics.print_text
00:00004076   graphics.print_text.loop
00:0000407F   graphics.print_text.exit
00:00004081   graphics.print_number8
00:00004099   graphics.print_number8.num1
00:0000409B   graphics.print_number8.loop
00:000040A4   graphics.print_number16
00:0000C100   math.random_seed
00:000040C8   math.random
00:000040DA   logo.run
00:000040E6   logo.load_color
00:000040EF   logo.show_anim
00:000040F1   logo.show_anim.loop
00:00004111   logo.show_frame
00:0000411E   logo.wait
00:00004120   logo.wait.loop
00:00004128   game.init
00:00004137   game.run
00:00004149   game.load_tiles
00:0000415B   game.start_game
00:00004164   game.show_level
00:00004172   game.game_loop
00:00004184   game.game_over
00:0000C102   level.current_level
00:00004195   level.init
00:000041AD   level.draw
00:000041BD   level.draw_floor
00:000041CC   level.draw_score
00:000041E8   level.draw_title
00:0000420A   level.draw_game_over
00:00004213   level.draw_level_title
00:0000422C X level.tile
00:00004247   level.next
00:0000425D   collision.check_robot
00:00004282   collision.check_robot.nocollision
00:00004284   collision.check_robots
00:0000428A   collision.check_robots.loop
00:00000000   spr.x
00:00000001   spr.y
00:00004297   spr.random_pos
00:0000429F   spr.random_pos.loop
00:000042AB   spr.move_right
00:000042B5   spr.move_left
00:000042BE   spr.move_up
00:000042C8   spr.move_down
00:000042D2   spr.draw
00:000042EE   spr.clear
00:000042F3   spr.draw_player
00:000042F8   spr.draw_robot1
00:000042FD   spr.draw_robot2
00:00004302   spr.draw_explosion
00:00004307   spr.draw_junk
00:0000003C   robots.count
00:0000C103   robots.array
00:0000430C   robots.init
00:00004312   robots.init.loop
00:0000431D   robots.level_robots_count
00:00004328   robots.level_robots_count.skip
00:00004329   robots.random_pos
00:00004331   robots.random_pos.loop
00:0000433E   robots.update
00:00004344   robots.update.loop
00:00004353   robots.collide
00:00004359   robots.collide.loop
00:00004366   robots.check_all_dead
00:0000436F   robots.check_all_dead.loop
00:00000005   robot.size
00:00000002   robot.frame_index
00:00000003   robot.frame_time
00:00000004   robot.state_offset
00:00000000   robot.state_normal
00:00000001   robot.state_explosion
00:00000002   robot.state_junk
00:00000003   robot.state_dead
00:0000437C   robot.init
00:0000438C   robot.random_pos
00:0000438E   robot.random_pos.loop
00:000043A3   robot.update_frame
00:000043B4   robot.update_pos_x
00:000043C1   robot.update_pos_y
00:000043CE   robot.update_pos
00:000043D9   robot.update_collision
00:000043E3   robot.update_normal
00:000043EF   robot.update_explosion
00:000043F6   robot.update_junk
00:000043F9   robot.update
00:00004413   robot.collide
00:0000441C   robot.draw
00:0000C22F   player.score
00:0000C231   player.hiscore
00:0000C233   player.x
00:0000C234   player.y
00:0000C235   player.moved
00:00000002   player.move_index
00:00004426   player.init
00:00004431   player.update_keyboard
00:00004464   player.wait
00:0000446A   player.add_score
00:00004481   player.add_score.noupdate
00:00004484   player.move_right
00:0000448D   player.move_left
00:00004496   player.move_up
00:0000449F   player.move_down
00:000044A8   player.update
00:000044B5 X player.teleport
00:000044C2   player.safe_teleport
00:000044D3   player.safe_teleport.loop
00:000044DD   player.clear_pos_flag
00:000044E2   player.collide
00:000044F2   resources.msg_score
00:00004513   resources.msg_title0
00:00004521   resources.msg_title1
00:0000452F   resources.msg_dead0
00:0000453D   resources.msg_dead1
00:0000454B   resources.logo_color
00:00004648   resources.logo_frame1
00:00004842   resources.logo_frame2
00:00004A3E   resources.logo_frame3
00:00004C37   resources.logo_frame4
00:00004E31   resources.tiles_pattern
00:00005B60   resources.tiles_color


 Output: ../robots.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00004000  Used: 00001E65

   Address   Length Align   Label
   00004000    7781         romheader
   00005E65    8603       <empty>
